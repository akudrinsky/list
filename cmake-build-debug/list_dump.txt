assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 0
	data[10] = 96c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 1
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 0
	data[10] = 96d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 1
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 5
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 6
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 5
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 0
	data[10] = 37402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 1
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 374027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 0
	data[10] = 374027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 1
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 5
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 6
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 5
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 111 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 0
	data[10] = 3a402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 1
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 349 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 402 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 441 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 111 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 0
	data[10] = 3a4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 1
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 5
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 349 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 6
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 376 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 5
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 113 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 0
	data[10] = edd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 1
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 113 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 0
	data[10] = edc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 1
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 5
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 6
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 5
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 0
	data[10] = f8c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 1
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 371 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 424 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 463 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 0
	data[10] = f8c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 1
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 5
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 371 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 6
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 398 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 5
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801000] (ok)
{
	size = 0
	data[10] = 44402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801039] (ok)
{
	size = 0
	data[10] = 444027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801072] (ok)
{
	size = 0
	data[10] = 44402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448010ab] (ok)
{
	size = 0
	data[10] = 44402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448010e4] (ok)
{
	size = 0
	data[10] = 44402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480111d] (ok)
{
	size = 0
	data[10] = 44402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801156] (ok)
{
	size = 0
	data[10] = 44402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480118f] (ok)
{
	size = 0
	data[10] = 44402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448011c8] (ok)
{
	size = 0
	data[10] = 44402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801201] (ok)
{
	size = 0
	data[10] = 44402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480123a] (ok)
{
	size = 0
	data[10] = 44402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801273] (ok)
{
	size = 0
	data[10] = 44402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 0
	data[10] = 44402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012e5] (ok)
{
	size = 0
	data[10] = 44402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 0
	data[10] = 44402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801357] (ok)
{
	size = 0
	data[10] = 44402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801390] (ok)
{
	size = 0
	data[10] = 44403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448013c9] (ok)
{
	size = 0
	data[10] = 444030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801402] (ok)
{
	size = 0
	data[10] = 44403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480143b] (ok)
{
	size = 0
	data[10] = 44403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801474] (ok)
{
	size = 0
	data[10] = 44403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448014ad] (ok)
{
	size = 0
	data[10] = 44403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448014e6] (ok)
{
	size = 0
	data[10] = 444033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480151f] (ok)
{
	size = 0
	data[10] = 44403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801558] (ok)
{
	size = 0
	data[10] = 444034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801591] (ok)
{
	size = 0
	data[10] = 44403560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448015ca] (ok)
{
	size = 0
	data[10] = 444035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801603] (ok)
{
	size = 0
	data[10] = 44403680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480163c] (ok)
{
	size = 0
	data[10] = 44403710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801675] (ok)
{
	size = 0
	data[10] = 444037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 1
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 2
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 1
	data[10] = 44402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 1
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 2
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 2
	data[10] = 44402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801000] (ok)
{
	size = 0
	data[10] = 76402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801039] (ok)
{
	size = 0
	data[10] = 76500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801072] (ok)
{
	size = 0
	data[10] = 76500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768010ab] (ok)
{
	size = 0
	data[10] = 76500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768010e4] (ok)
{
	size = 0
	data[10] = 765001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680111d] (ok)
{
	size = 0
	data[10] = 76500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801156] (ok)
{
	size = 0
	data[10] = 765002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680118f] (ok)
{
	size = 0
	data[10] = 76500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768011c8] (ok)
{
	size = 0
	data[10] = 765003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801201] (ok)
{
	size = 0
	data[10] = 76500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680123a] (ok)
{
	size = 0
	data[10] = 76500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801273] (ok)
{
	size = 0
	data[10] = 765005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 0
	data[10] = 76500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012e5] (ok)
{
	size = 0
	data[10] = 765006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 0
	data[10] = 76500750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801357] (ok)
{
	size = 0
	data[10] = 765007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801390] (ok)
{
	size = 0
	data[10] = 76500870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768013c9] (ok)
{
	size = 0
	data[10] = 76500900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801402] (ok)
{
	size = 0
	data[10] = 76500990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680143b] (ok)
{
	size = 0
	data[10] = 76500a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801474] (ok)
{
	size = 0
	data[10] = 76500ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768014ad] (ok)
{
	size = 0
	data[10] = 76600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768014e6] (ok)
{
	size = 0
	data[10] = 76600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680151f] (ok)
{
	size = 0
	data[10] = 76600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801558] (ok)
{
	size = 0
	data[10] = 766001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801591] (ok)
{
	size = 0
	data[10] = 76600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768015ca] (ok)
{
	size = 0
	data[10] = 764027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801603] (ok)
{
	size = 0
	data[10] = 76402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680163c] (ok)
{
	size = 0
	data[10] = 76402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801675] (ok)
{
	size = 0
	data[10] = 76402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 1
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 2
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 1
	data[10] = 76500750
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 1
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 2
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 2
	data[10] = 76500750
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801000] (ok)
{
	size = 0
	data[10] = a2402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801039] (ok)
{
	size = 0
	data[10] = a24027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801072] (ok)
{
	size = 0
	data[10] = a2402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28010ab] (ok)
{
	size = 0
	data[10] = a2402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28010e4] (ok)
{
	size = 0
	data[10] = a2402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280111d] (ok)
{
	size = 0
	data[10] = a2402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801156] (ok)
{
	size = 0
	data[10] = a2402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280118f] (ok)
{
	size = 0
	data[10] = a2402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28011c8] (ok)
{
	size = 0
	data[10] = a2402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801201] (ok)
{
	size = 0
	data[10] = a2402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280123a] (ok)
{
	size = 0
	data[10] = a2402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801273] (ok)
{
	size = 0
	data[10] = a2402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28012ac] (ok)
{
	size = 0
	data[10] = a2402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28012e5] (ok)
{
	size = 0
	data[10] = a2402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280131e] (ok)
{
	size = 0
	data[10] = a2402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801357] (ok)
{
	size = 0
	data[10] = a2402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801390] (ok)
{
	size = 0
	data[10] = a2403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28013c9] (ok)
{
	size = 0
	data[10] = a24030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801402] (ok)
{
	size = 0
	data[10] = a2403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280143b] (ok)
{
	size = 0
	data[10] = a2403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801474] (ok)
{
	size = 0
	data[10] = a2500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28014ad] (ok)
{
	size = 0
	data[10] = a2600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28014e6] (ok)
{
	size = 0
	data[10] = a2600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280151f] (ok)
{
	size = 0
	data[10] = a2600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801558] (ok)
{
	size = 0
	data[10] = a26001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801591] (ok)
{
	size = 0
	data[10] = a2600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28015ca] (ok)
{
	size = 0
	data[10] = a2403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801603] (ok)
{
	size = 0
	data[10] = a2403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280163c] (ok)
{
	size = 0
	data[10] = a24033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801675] (ok)
{
	size = 0
	data[10] = a2403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001000] (ok)
{
	size = 0
	data[10] = 3dc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001039] (ok)
{
	size = 0
	data[10] = 3dc027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001072] (ok)
{
	size = 0
	data[10] = 3dc02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0010ab] (ok)
{
	size = 0
	data[10] = 3dc02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0010e4] (ok)
{
	size = 0
	data[10] = 3dc02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00111d] (ok)
{
	size = 0
	data[10] = 3dc02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001156] (ok)
{
	size = 0
	data[10] = 3dc02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00118f] (ok)
{
	size = 0
	data[10] = 3dc02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0011c8] (ok)
{
	size = 0
	data[10] = 3dc02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001201] (ok)
{
	size = 0
	data[10] = 3dc02c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00123a] (ok)
{
	size = 0
	data[10] = 3dc02cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001273] (ok)
{
	size = 0
	data[10] = 3dc02d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 0
	data[10] = 3dc02e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012e5] (ok)
{
	size = 0
	data[10] = 3dc02ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 0
	data[10] = 3dc02f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001357] (ok)
{
	size = 0
	data[10] = 3dc02fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001390] (ok)
{
	size = 0
	data[10] = 3dc03050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0013c9] (ok)
{
	size = 0
	data[10] = 3dc030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001402] (ok)
{
	size = 0
	data[10] = 3dc03170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00143b] (ok)
{
	size = 0
	data[10] = 3dc03200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001474] (ok)
{
	size = 0
	data[10] = 3dc03290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0014ad] (ok)
{
	size = 0
	data[10] = 3dc03320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0014e6] (ok)
{
	size = 0
	data[10] = 3dc033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00151f] (ok)
{
	size = 0
	data[10] = 3dc03440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001558] (ok)
{
	size = 0
	data[10] = 3dc034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001591] (ok)
{
	size = 0
	data[10] = 3dc03560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0015ca] (ok)
{
	size = 0
	data[10] = 3dc035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001603] (ok)
{
	size = 0
	data[10] = 3dc03680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00163c] (ok)
{
	size = 0
	data[10] = 3dc03710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001675] (ok)
{
	size = 0
	data[10] = 3dc037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 1
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 2
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 1
	data[10] = 3dc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 1
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 2
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 2
	data[10] = 3dc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801000] (ok)
{
	size = 0
	data[10] = d1402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801039] (ok)
{
	size = 0
	data[10] = d14027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801072] (ok)
{
	size = 0
	data[10] = d1402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18010ab] (ok)
{
	size = 0
	data[10] = d1402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18010e4] (ok)
{
	size = 0
	data[10] = d1402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180111d] (ok)
{
	size = 0
	data[10] = d1402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801156] (ok)
{
	size = 0
	data[10] = d1402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180118f] (ok)
{
	size = 0
	data[10] = d1402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18011c8] (ok)
{
	size = 0
	data[10] = d1402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801201] (ok)
{
	size = 0
	data[10] = d1402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180123a] (ok)
{
	size = 0
	data[10] = d1402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801273] (ok)
{
	size = 0
	data[10] = d1402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 0
	data[10] = d1402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012e5] (ok)
{
	size = 0
	data[10] = d1402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 0
	data[10] = d1402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801357] (ok)
{
	size = 0
	data[10] = d1402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801390] (ok)
{
	size = 0
	data[10] = d1403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18013c9] (ok)
{
	size = 0
	data[10] = d14030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801402] (ok)
{
	size = 0
	data[10] = d1500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180143b] (ok)
{
	size = 0
	data[10] = d1500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801474] (ok)
{
	size = 0
	data[10] = d1500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18014ad] (ok)
{
	size = 0
	data[10] = d15001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18014e6] (ok)
{
	size = 0
	data[10] = d1500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180151f] (ok)
{
	size = 0
	data[10] = d15002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801558] (ok)
{
	size = 0
	data[10] = d1500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801591] (ok)
{
	size = 0
	data[10] = d15003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18015ca] (ok)
{
	size = 0
	data[10] = d1500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801603] (ok)
{
	size = 0
	data[10] = d1500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180163c] (ok)
{
	size = 0
	data[10] = d15005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801675] (ok)
{
	size = 0
	data[10] = d1500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 1
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 2
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 1
	data[10] = d1402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 1
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 2
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 2
	data[10] = d1402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801000] (ok)
{
	size = 0
	data[10] = 9c402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801039] (ok)
{
	size = 0
	data[10] = 9c4027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801072] (ok)
{
	size = 0
	data[10] = 9c402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010ab] (ok)
{
	size = 0
	data[10] = 9c402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010e4] (ok)
{
	size = 0
	data[10] = 9c402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80111d] (ok)
{
	size = 0
	data[10] = 9c402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801156] (ok)
{
	size = 0
	data[10] = 9c402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80118f] (ok)
{
	size = 0
	data[10] = 9c402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8011c8] (ok)
{
	size = 0
	data[10] = 9c402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801201] (ok)
{
	size = 0
	data[10] = 9c402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80123a] (ok)
{
	size = 0
	data[10] = 9c402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801273] (ok)
{
	size = 0
	data[10] = 9c402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 0
	data[10] = 9c402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012e5] (ok)
{
	size = 0
	data[10] = 9c402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80131e] (ok)
{
	size = 0
	data[10] = 9c402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801357] (ok)
{
	size = 0
	data[10] = 9c402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801390] (ok)
{
	size = 0
	data[10] = 9c403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8013c9] (ok)
{
	size = 0
	data[10] = 9c4030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801402] (ok)
{
	size = 0
	data[10] = 9c403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80143b] (ok)
{
	size = 0
	data[10] = 9c403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801474] (ok)
{
	size = 0
	data[10] = 9c403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014ad] (ok)
{
	size = 0
	data[10] = 9c500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014e6] (ok)
{
	size = 0
	data[10] = 9c500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80151f] (ok)
{
	size = 0
	data[10] = 9c500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801558] (ok)
{
	size = 0
	data[10] = 9c5001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801591] (ok)
{
	size = 0
	data[10] = 9c500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8015ca] (ok)
{
	size = 0
	data[10] = 9c600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801603] (ok)
{
	size = 0
	data[10] = 9c600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80163c] (ok)
{
	size = 0
	data[10] = 9c600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801675] (ok)
{
	size = 0
	data[10] = 9c6001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801000] (ok)
{
	size = 0
	data[10] = e5402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801039] (ok)
{
	size = 0
	data[10] = e54027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801072] (ok)
{
	size = 0
	data[10] = e5402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58010ab] (ok)
{
	size = 0
	data[10] = e5402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58010e4] (ok)
{
	size = 0
	data[10] = e5402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580111d] (ok)
{
	size = 0
	data[10] = e5402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801156] (ok)
{
	size = 0
	data[10] = e5402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580118f] (ok)
{
	size = 0
	data[10] = e5402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58011c8] (ok)
{
	size = 0
	data[10] = e5402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801201] (ok)
{
	size = 0
	data[10] = e5402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580123a] (ok)
{
	size = 0
	data[10] = e5402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801273] (ok)
{
	size = 0
	data[10] = e5402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 0
	data[10] = e5402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012e5] (ok)
{
	size = 0
	data[10] = e5402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 0
	data[10] = e5402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801357] (ok)
{
	size = 0
	data[10] = e5402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801390] (ok)
{
	size = 0
	data[10] = e5403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58013c9] (ok)
{
	size = 0
	data[10] = e54030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801402] (ok)
{
	size = 0
	data[10] = e5403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580143b] (ok)
{
	size = 0
	data[10] = e5403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801474] (ok)
{
	size = 0
	data[10] = e5403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58014ad] (ok)
{
	size = 0
	data[10] = e5403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58014e6] (ok)
{
	size = 0
	data[10] = e54033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580151f] (ok)
{
	size = 0
	data[10] = e5403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801558] (ok)
{
	size = 0
	data[10] = e54034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801591] (ok)
{
	size = 0
	data[10] = e5403560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58015ca] (ok)
{
	size = 0
	data[10] = e54035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801603] (ok)
{
	size = 0
	data[10] = e5403680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580163c] (ok)
{
	size = 0
	data[10] = e5500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801675] (ok)
{
	size = 0
	data[10] = e5500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 1
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 2
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 1
	data[10] = e5402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 1
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 2
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 2
	data[10] = e5402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801000] (ok)
{
	size = 0
	data[10] = b1402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801039] (ok)
{
	size = 0
	data[10] = b14027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801072] (ok)
{
	size = 0
	data[10] = b1500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18010ab] (ok)
{
	size = 0
	data[10] = b1500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18010e4] (ok)
{
	size = 0
	data[10] = b1500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180111d] (ok)
{
	size = 0
	data[10] = b15001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801156] (ok)
{
	size = 0
	data[10] = b1500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180118f] (ok)
{
	size = 0
	data[10] = b15002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18011c8] (ok)
{
	size = 0
	data[10] = b1500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801201] (ok)
{
	size = 0
	data[10] = b15003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180123a] (ok)
{
	size = 0
	data[10] = b1500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801273] (ok)
{
	size = 0
	data[10] = b1500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 0
	data[10] = b15005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012e5] (ok)
{
	size = 0
	data[10] = b1600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 0
	data[10] = b1500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801357] (ok)
{
	size = 0
	data[10] = b15006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801390] (ok)
{
	size = 0
	data[10] = b1500750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18013c9] (ok)
{
	size = 0
	data[10] = b15007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801402] (ok)
{
	size = 0
	data[10] = b1500870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180143b] (ok)
{
	size = 0
	data[10] = b1500900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801474] (ok)
{
	size = 0
	data[10] = b1500990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18014ad] (ok)
{
	size = 0
	data[10] = b1402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18014e6] (ok)
{
	size = 0
	data[10] = b1402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180151f] (ok)
{
	size = 0
	data[10] = b1402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801558] (ok)
{
	size = 0
	data[10] = b1402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801591] (ok)
{
	size = 0
	data[10] = b1402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18015ca] (ok)
{
	size = 0
	data[10] = b1402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801603] (ok)
{
	size = 0
	data[10] = b1402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180163c] (ok)
{
	size = 0
	data[10] = b1402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801675] (ok)
{
	size = 0
	data[10] = b1402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 1
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 2
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 1
	data[10] = b1500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 1
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 2
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 2
	data[10] = b1500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801000] (ok)
{
	size = 0
	data[10] = c7402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801039] (ok)
{
	size = 0
	data[10] = c74027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801072] (ok)
{
	size = 0
	data[10] = c7500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78010ab] (ok)
{
	size = 0
	data[10] = c7500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78010e4] (ok)
{
	size = 0
	data[10] = c7500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780111d] (ok)
{
	size = 0
	data[10] = c75001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801156] (ok)
{
	size = 0
	data[10] = c7500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780118f] (ok)
{
	size = 0
	data[10] = c75002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78011c8] (ok)
{
	size = 0
	data[10] = c7500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801201] (ok)
{
	size = 0
	data[10] = c7600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780123a] (ok)
{
	size = 0
	data[10] = c7600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801273] (ok)
{
	size = 0
	data[10] = c7600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 0
	data[10] = c76001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012e5] (ok)
{
	size = 0
	data[10] = c7600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 0
	data[10] = c76002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801357] (ok)
{
	size = 0
	data[10] = c7600360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801390] (ok)
{
	size = 0
	data[10] = c76003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78013c9] (ok)
{
	size = 0
	data[10] = c7600480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801402] (ok)
{
	size = 0
	data[10] = c7600510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780143b] (ok)
{
	size = 0
	data[10] = c76005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801474] (ok)
{
	size = 0
	data[10] = c7600630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78014ad] (ok)
{
	size = 0
	data[10] = c76006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78014e6] (ok)
{
	size = 0
	data[10] = c7600750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780151f] (ok)
{
	size = 0
	data[10] = c76007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801558] (ok)
{
	size = 0
	data[10] = c7600870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801591] (ok)
{
	size = 0
	data[10] = c7600900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78015ca] (ok)
{
	size = 0
	data[10] = c7600990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801603] (ok)
{
	size = 0
	data[10] = c7600a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780163c] (ok)
{
	size = 0
	data[10] = c7600ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801675] (ok)
{
	size = 0
	data[10] = c7600b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 1
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 2
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 1
	data[10] = c76002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 1
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 2
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 2
	data[10] = c76002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001000] (ok)
{
	size = 0
	data[10] = b6c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001039] (ok)
{
	size = 0
	data[10] = b6c027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001072] (ok)
{
	size = 0
	data[10] = b6d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70010ab] (ok)
{
	size = 0
	data[10] = b6d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70010e4] (ok)
{
	size = 0
	data[10] = b6d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700111d] (ok)
{
	size = 0
	data[10] = b6d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001156] (ok)
{
	size = 0
	data[10] = b6d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700118f] (ok)
{
	size = 0
	data[10] = b6d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70011c8] (ok)
{
	size = 0
	data[10] = b6d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001201] (ok)
{
	size = 0
	data[10] = b6d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700123a] (ok)
{
	size = 0
	data[10] = b6d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001273] (ok)
{
	size = 0
	data[10] = b6d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 0
	data[10] = b6d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012e5] (ok)
{
	size = 0
	data[10] = b6d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 0
	data[10] = b6d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001357] (ok)
{
	size = 0
	data[10] = b6e00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001390] (ok)
{
	size = 0
	data[10] = b6e00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70013c9] (ok)
{
	size = 0
	data[10] = b6e00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001402] (ok)
{
	size = 0
	data[10] = b6e001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700143b] (ok)
{
	size = 0
	data[10] = b6e00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001474] (ok)
{
	size = 0
	data[10] = b6e002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70014ad] (ok)
{
	size = 0
	data[10] = b6e00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70014e6] (ok)
{
	size = 0
	data[10] = b6e003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700151f] (ok)
{
	size = 0
	data[10] = b6e00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001558] (ok)
{
	size = 0
	data[10] = b6e00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001591] (ok)
{
	size = 0
	data[10] = b6e005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70015ca] (ok)
{
	size = 0
	data[10] = b6e00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001603] (ok)
{
	size = 0
	data[10] = b6e006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700163c] (ok)
{
	size = 0
	data[10] = b6d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001675] (ok)
{
	size = 0
	data[10] = b6d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 1
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 2
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 1
	data[10] = b6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 1
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 2
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 2
	data[10] = b6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001000] (ok)
{
	size = 0
	data[10] = eac02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001039] (ok)
{
	size = 0
	data[10] = eac027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001072] (ok)
{
	size = 0
	data[10] = eac02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0010ab] (ok)
{
	size = 0
	data[10] = eac02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0010e4] (ok)
{
	size = 0
	data[10] = eac02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00111d] (ok)
{
	size = 0
	data[10] = eac02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001156] (ok)
{
	size = 0
	data[10] = eac02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00118f] (ok)
{
	size = 0
	data[10] = eac02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0011c8] (ok)
{
	size = 0
	data[10] = eac02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001201] (ok)
{
	size = 0
	data[10] = ead00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00123a] (ok)
{
	size = 0
	data[10] = ead00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001273] (ok)
{
	size = 0
	data[10] = ead00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 0
	data[10] = ead001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012e5] (ok)
{
	size = 0
	data[10] = ead00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 0
	data[10] = ead002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001357] (ok)
{
	size = 0
	data[10] = ead00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001390] (ok)
{
	size = 0
	data[10] = ead003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0013c9] (ok)
{
	size = 0
	data[10] = ead00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001402] (ok)
{
	size = 0
	data[10] = ead00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00143b] (ok)
{
	size = 0
	data[10] = ead005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001474] (ok)
{
	size = 0
	data[10] = ead00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0014ad] (ok)
{
	size = 0
	data[10] = ead006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0014e6] (ok)
{
	size = 0
	data[10] = ead00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00151f] (ok)
{
	size = 0
	data[10] = ead007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001558] (ok)
{
	size = 0
	data[10] = ead00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001591] (ok)
{
	size = 0
	data[10] = ead00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0015ca] (ok)
{
	size = 0
	data[10] = ead00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001603] (ok)
{
	size = 0
	data[10] = ead00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00163c] (ok)
{
	size = 0
	data[10] = ead00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001675] (ok)
{
	size = 0
	data[10] = ead00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 1
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 2
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 1
	data[10] = ead002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 1
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 2
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 2
	data[10] = ead002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001000] (ok)
{
	size = 0
	data[10] = acc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001039] (ok)
{
	size = 0
	data[10] = acc027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001072] (ok)
{
	size = 0
	data[10] = acc02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0010ab] (ok)
{
	size = 0
	data[10] = acc02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0010e4] (ok)
{
	size = 0
	data[10] = acc02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00111d] (ok)
{
	size = 0
	data[10] = acc02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001156] (ok)
{
	size = 0
	data[10] = acc02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00118f] (ok)
{
	size = 0
	data[10] = acc02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0011c8] (ok)
{
	size = 0
	data[10] = acc02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001201] (ok)
{
	size = 0
	data[10] = acc02c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00123a] (ok)
{
	size = 0
	data[10] = acc02cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001273] (ok)
{
	size = 0
	data[10] = acc02d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 0
	data[10] = acc02e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012e5] (ok)
{
	size = 0
	data[10] = acc02ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 0
	data[10] = acc02f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001357] (ok)
{
	size = 0
	data[10] = acc02fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001390] (ok)
{
	size = 0
	data[10] = acc03050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0013c9] (ok)
{
	size = 0
	data[10] = acc030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001402] (ok)
{
	size = 0
	data[10] = acc03170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00143b] (ok)
{
	size = 0
	data[10] = acc03200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001474] (ok)
{
	size = 0
	data[10] = acc03290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0014ad] (ok)
{
	size = 0
	data[10] = acc03320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0014e6] (ok)
{
	size = 0
	data[10] = acc033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00151f] (ok)
{
	size = 0
	data[10] = acc03440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001558] (ok)
{
	size = 0
	data[10] = acc034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001591] (ok)
{
	size = 0
	data[10] = acc03560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0015ca] (ok)
{
	size = 0
	data[10] = acc035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001603] (ok)
{
	size = 0
	data[10] = acc03680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00163c] (ok)
{
	size = 0
	data[10] = acc03710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001675] (ok)
{
	size = 0
	data[10] = acc037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 1
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 2
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 1
	data[10] = acc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 1
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 2
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 2
	data[10] = acc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 0
	data[10] = a8c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 1
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 0
	data[10] = a8c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 1
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 5
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 6
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 5
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 0
	data[10] = cf402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 1
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 0
	data[10] = cf4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 1
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 5
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 6
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 5
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 0
	data[10] = a6402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 1
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a64027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 0
	data[10] = a64027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 1
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 5
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 6
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 5
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 0
	data[10] = 28402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 1
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 0
	data[10] = 28500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 1
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 6
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 0
	data[10] = 17c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 1
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 0
	data[10] = 17d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 1
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 5
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 6
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 5
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 0
	data[10] = 37402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 1
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 0
	data[10] = 37500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 1
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 5
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 6
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 5
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 0
	data[10] = d7402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 1
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d74027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 0
	data[10] = d74027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 1
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 5
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 6
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 5
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 0
	data[10] = cdc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 1
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 0
	data[10] = cdd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 1
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 5
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 6
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 5
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 0
	data[10] = cbc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 1
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 0
	data[10] = cbd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 1
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 5
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 6
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 5
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 0
	data[10] = 40402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 1
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 0
	data[10] = 40500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 1
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 5
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 6
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 5
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 0
	data[10] = f5402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 1
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f54027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 0
	data[10] = f54027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 1
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 5
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 6
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 5
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 0
	data[10] = 95c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 1
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 0
	data[10] = 95c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 1
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 5
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 6
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 5
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 0
	data[10] = da402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 1
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 0
	data[10] = da4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 1
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 5
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 6
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 5
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 0
	data[10] = 4e402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 1
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 0
	data[10] = 4e4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 1
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 5
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 6
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 5
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 0
	data[10] = 54c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 1
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 0
	data[10] = 54c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 1
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 5
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 6
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 5
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 0
	data[10] = 35c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 1
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 482 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 529 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 0
	data[10] = 35d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 1
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 5
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 6
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 447 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 5
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 0
	data[10] = 13c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 1
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 482 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 529 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 0
	data[10] = 13d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 1
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 5
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 6
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 447 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 5
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 0
	data[10] = 16c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 1
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 0
	data[10] = 16c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 1
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 5
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 6
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 5
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 0
	data[10] = 82c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 1
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 0
	data[10] = 82d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 1
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 5
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 6
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 5
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 0
	data[10] = 4b402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 1
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 0
	data[10] = 4b4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 1
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 5
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 6
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 5
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 0
	data[10] = 77402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 1
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 0
	data[10] = 77500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 1
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 5
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 6
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 5
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 0
	data[10] = 9bc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 1
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 0
	data[10] = 9bc027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 1
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 5
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 6
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 5
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 0
	data[10] = 2fc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 1
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 0
	data[10] = 2fc027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 1
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 5
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 6
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 5
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 0
	data[10] = dac02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 1
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 409 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 480 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 527 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 0
	data[10] = dac027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 1
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 409 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 6
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 445 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 0
	data[10] = 58402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 1
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 584027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 0
	data[10] = 584027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 1
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 5
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 6
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 5
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 0
	data[10] = 91402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 1
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 914027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 0
	data[10] = 914027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 1
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 6
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 0
	data[10] = 91402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 1
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 914027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 0
	data[10] = 914027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 1
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 6
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


