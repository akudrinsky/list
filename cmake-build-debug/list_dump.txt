assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 0
	data[10] = 96c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 1
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 0
	data[10] = 96d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 1
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 2
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 3
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 4
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 5
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 6
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e04bea10] (ok)
{
	size = 5
	data[10] = 96d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 0
	data[10] = 37402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 1
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 374027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 114 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 0
	data[10] = 374027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 1
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 2
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 3
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 4
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 5
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 6
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ea701a10] (ok)
{
	size = 5
	data[10] = 374027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 111 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 0
	data[10] = 3a402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 1
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 349 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 402 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from void phys_match_log(List_t *) in line 441 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 111 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 0
	data[10] = 3a4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 1
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 2
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 3
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 4
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 311 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 5
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 349 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 6
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 376 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef824a10] (ok)
{
	size = 5
	data[10] = 3a4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 113 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 0
	data[10] = edd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 1
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 405 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 444 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 113 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 0
	data[10] = edc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 1
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 2
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 3
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 4
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 314 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 5
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 352 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 6
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 379 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4303a10] (ok)
{
	size = 5
	data[10] = edc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 0
	data[10] = f8c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 1
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 371 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 424 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 463 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 0
	data[10] = f8c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 1
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 2
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 3
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 4
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 333 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 5
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 371 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 6
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 398 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e53a3a10] (ok)
{
	size = 5
	data[10] = f8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801000] (ok)
{
	size = 0
	data[10] = 44402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801039] (ok)
{
	size = 0
	data[10] = 444027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801072] (ok)
{
	size = 0
	data[10] = 44402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448010ab] (ok)
{
	size = 0
	data[10] = 44402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448010e4] (ok)
{
	size = 0
	data[10] = 44402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480111d] (ok)
{
	size = 0
	data[10] = 44402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801156] (ok)
{
	size = 0
	data[10] = 44402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480118f] (ok)
{
	size = 0
	data[10] = 44402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448011c8] (ok)
{
	size = 0
	data[10] = 44402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801201] (ok)
{
	size = 0
	data[10] = 44402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480123a] (ok)
{
	size = 0
	data[10] = 44402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801273] (ok)
{
	size = 0
	data[10] = 44402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 0
	data[10] = 44402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012e5] (ok)
{
	size = 0
	data[10] = 44402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 0
	data[10] = 44402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801357] (ok)
{
	size = 0
	data[10] = 44402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801390] (ok)
{
	size = 0
	data[10] = 44403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448013c9] (ok)
{
	size = 0
	data[10] = 444030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801402] (ok)
{
	size = 0
	data[10] = 44403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480143b] (ok)
{
	size = 0
	data[10] = 44403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801474] (ok)
{
	size = 0
	data[10] = 44403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448014ad] (ok)
{
	size = 0
	data[10] = 44403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448014e6] (ok)
{
	size = 0
	data[10] = 444033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480151f] (ok)
{
	size = 0
	data[10] = 44403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801558] (ok)
{
	size = 0
	data[10] = 444034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801591] (ok)
{
	size = 0
	data[10] = 44403560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448015ca] (ok)
{
	size = 0
	data[10] = 444035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801603] (ok)
{
	size = 0
	data[10] = 44403680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480163c] (ok)
{
	size = 0
	data[10] = 44403710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [44801675] (ok)
{
	size = 0
	data[10] = 444037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 1
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 2
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 1
	data[10] = 44402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 1
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [448012ac] (ok)
{
	size = 2
	data[10] = 44402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [4480131e] (ok)
{
	size = 2
	data[10] = 44402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801000] (ok)
{
	size = 0
	data[10] = 76402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801039] (ok)
{
	size = 0
	data[10] = 76500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801072] (ok)
{
	size = 0
	data[10] = 76500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768010ab] (ok)
{
	size = 0
	data[10] = 76500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768010e4] (ok)
{
	size = 0
	data[10] = 765001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680111d] (ok)
{
	size = 0
	data[10] = 76500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801156] (ok)
{
	size = 0
	data[10] = 765002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680118f] (ok)
{
	size = 0
	data[10] = 76500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768011c8] (ok)
{
	size = 0
	data[10] = 765003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801201] (ok)
{
	size = 0
	data[10] = 76500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680123a] (ok)
{
	size = 0
	data[10] = 76500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801273] (ok)
{
	size = 0
	data[10] = 765005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 0
	data[10] = 76500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012e5] (ok)
{
	size = 0
	data[10] = 765006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 0
	data[10] = 76500750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801357] (ok)
{
	size = 0
	data[10] = 765007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801390] (ok)
{
	size = 0
	data[10] = 76500870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768013c9] (ok)
{
	size = 0
	data[10] = 76500900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801402] (ok)
{
	size = 0
	data[10] = 76500990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680143b] (ok)
{
	size = 0
	data[10] = 76500a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801474] (ok)
{
	size = 0
	data[10] = 76500ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768014ad] (ok)
{
	size = 0
	data[10] = 76600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768014e6] (ok)
{
	size = 0
	data[10] = 76600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680151f] (ok)
{
	size = 0
	data[10] = 76600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801558] (ok)
{
	size = 0
	data[10] = 766001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801591] (ok)
{
	size = 0
	data[10] = 76600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768015ca] (ok)
{
	size = 0
	data[10] = 764027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801603] (ok)
{
	size = 0
	data[10] = 76402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680163c] (ok)
{
	size = 0
	data[10] = 76402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [76801675] (ok)
{
	size = 0
	data[10] = 76402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 1
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 2
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 1
	data[10] = 76500750
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 1
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [768012ac] (ok)
{
	size = 2
	data[10] = 76500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7680131e] (ok)
{
	size = 2
	data[10] = 76500750
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801000] (ok)
{
	size = 0
	data[10] = a2402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801039] (ok)
{
	size = 0
	data[10] = a24027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801072] (ok)
{
	size = 0
	data[10] = a2402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28010ab] (ok)
{
	size = 0
	data[10] = a2402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28010e4] (ok)
{
	size = 0
	data[10] = a2402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280111d] (ok)
{
	size = 0
	data[10] = a2402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801156] (ok)
{
	size = 0
	data[10] = a2402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280118f] (ok)
{
	size = 0
	data[10] = a2402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28011c8] (ok)
{
	size = 0
	data[10] = a2402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801201] (ok)
{
	size = 0
	data[10] = a2402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280123a] (ok)
{
	size = 0
	data[10] = a2402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801273] (ok)
{
	size = 0
	data[10] = a2402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28012ac] (ok)
{
	size = 0
	data[10] = a2402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28012e5] (ok)
{
	size = 0
	data[10] = a2402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280131e] (ok)
{
	size = 0
	data[10] = a2402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801357] (ok)
{
	size = 0
	data[10] = a2402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801390] (ok)
{
	size = 0
	data[10] = a2403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28013c9] (ok)
{
	size = 0
	data[10] = a24030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801402] (ok)
{
	size = 0
	data[10] = a2403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280143b] (ok)
{
	size = 0
	data[10] = a2403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801474] (ok)
{
	size = 0
	data[10] = a2500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28014ad] (ok)
{
	size = 0
	data[10] = a2600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28014e6] (ok)
{
	size = 0
	data[10] = a2600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280151f] (ok)
{
	size = 0
	data[10] = a2600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801558] (ok)
{
	size = 0
	data[10] = a26001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801591] (ok)
{
	size = 0
	data[10] = a2600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a28015ca] (ok)
{
	size = 0
	data[10] = a2403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801603] (ok)
{
	size = 0
	data[10] = a2403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a280163c] (ok)
{
	size = 0
	data[10] = a24033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2801675] (ok)
{
	size = 0
	data[10] = a2403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001000] (ok)
{
	size = 0
	data[10] = 3dc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001039] (ok)
{
	size = 0
	data[10] = 3dc027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001072] (ok)
{
	size = 0
	data[10] = 3dc02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0010ab] (ok)
{
	size = 0
	data[10] = 3dc02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0010e4] (ok)
{
	size = 0
	data[10] = 3dc02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00111d] (ok)
{
	size = 0
	data[10] = 3dc02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001156] (ok)
{
	size = 0
	data[10] = 3dc02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00118f] (ok)
{
	size = 0
	data[10] = 3dc02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0011c8] (ok)
{
	size = 0
	data[10] = 3dc02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001201] (ok)
{
	size = 0
	data[10] = 3dc02c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00123a] (ok)
{
	size = 0
	data[10] = 3dc02cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001273] (ok)
{
	size = 0
	data[10] = 3dc02d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 0
	data[10] = 3dc02e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012e5] (ok)
{
	size = 0
	data[10] = 3dc02ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 0
	data[10] = 3dc02f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001357] (ok)
{
	size = 0
	data[10] = 3dc02fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001390] (ok)
{
	size = 0
	data[10] = 3dc03050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0013c9] (ok)
{
	size = 0
	data[10] = 3dc030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001402] (ok)
{
	size = 0
	data[10] = 3dc03170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00143b] (ok)
{
	size = 0
	data[10] = 3dc03200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001474] (ok)
{
	size = 0
	data[10] = 3dc03290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0014ad] (ok)
{
	size = 0
	data[10] = 3dc03320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0014e6] (ok)
{
	size = 0
	data[10] = 3dc033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00151f] (ok)
{
	size = 0
	data[10] = 3dc03440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001558] (ok)
{
	size = 0
	data[10] = 3dc034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001591] (ok)
{
	size = 0
	data[10] = 3dc03560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0015ca] (ok)
{
	size = 0
	data[10] = 3dc035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001603] (ok)
{
	size = 0
	data[10] = 3dc03680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00163c] (ok)
{
	size = 0
	data[10] = 3dc03710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e001675] (ok)
{
	size = 0
	data[10] = 3dc037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 1
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 2
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 1
	data[10] = 3dc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 1
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e0012ac] (ok)
{
	size = 2
	data[10] = 3dc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3e00131e] (ok)
{
	size = 2
	data[10] = 3dc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801000] (ok)
{
	size = 0
	data[10] = d1402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801039] (ok)
{
	size = 0
	data[10] = d14027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801072] (ok)
{
	size = 0
	data[10] = d1402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18010ab] (ok)
{
	size = 0
	data[10] = d1402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18010e4] (ok)
{
	size = 0
	data[10] = d1402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180111d] (ok)
{
	size = 0
	data[10] = d1402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801156] (ok)
{
	size = 0
	data[10] = d1402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180118f] (ok)
{
	size = 0
	data[10] = d1402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18011c8] (ok)
{
	size = 0
	data[10] = d1402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801201] (ok)
{
	size = 0
	data[10] = d1402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180123a] (ok)
{
	size = 0
	data[10] = d1402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801273] (ok)
{
	size = 0
	data[10] = d1402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 0
	data[10] = d1402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012e5] (ok)
{
	size = 0
	data[10] = d1402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 0
	data[10] = d1402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801357] (ok)
{
	size = 0
	data[10] = d1402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801390] (ok)
{
	size = 0
	data[10] = d1403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18013c9] (ok)
{
	size = 0
	data[10] = d14030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801402] (ok)
{
	size = 0
	data[10] = d1500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180143b] (ok)
{
	size = 0
	data[10] = d1500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801474] (ok)
{
	size = 0
	data[10] = d1500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18014ad] (ok)
{
	size = 0
	data[10] = d15001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18014e6] (ok)
{
	size = 0
	data[10] = d1500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180151f] (ok)
{
	size = 0
	data[10] = d15002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801558] (ok)
{
	size = 0
	data[10] = d1500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801591] (ok)
{
	size = 0
	data[10] = d15003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18015ca] (ok)
{
	size = 0
	data[10] = d1500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801603] (ok)
{
	size = 0
	data[10] = d1500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180163c] (ok)
{
	size = 0
	data[10] = d15005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d1801675] (ok)
{
	size = 0
	data[10] = d1500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 1
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 2
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 1
	data[10] = d1402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 1
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d18012ac] (ok)
{
	size = 2
	data[10] = d1402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d180131e] (ok)
{
	size = 2
	data[10] = d1402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801000] (ok)
{
	size = 0
	data[10] = 9c402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801039] (ok)
{
	size = 0
	data[10] = 9c4027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801072] (ok)
{
	size = 0
	data[10] = 9c402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010ab] (ok)
{
	size = 0
	data[10] = 9c402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010e4] (ok)
{
	size = 0
	data[10] = 9c402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80111d] (ok)
{
	size = 0
	data[10] = 9c402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801156] (ok)
{
	size = 0
	data[10] = 9c402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80118f] (ok)
{
	size = 0
	data[10] = 9c402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8011c8] (ok)
{
	size = 0
	data[10] = 9c402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801201] (ok)
{
	size = 0
	data[10] = 9c402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80123a] (ok)
{
	size = 0
	data[10] = 9c402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801273] (ok)
{
	size = 0
	data[10] = 9c402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 0
	data[10] = 9c402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012e5] (ok)
{
	size = 0
	data[10] = 9c402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80131e] (ok)
{
	size = 0
	data[10] = 9c402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801357] (ok)
{
	size = 0
	data[10] = 9c402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801390] (ok)
{
	size = 0
	data[10] = 9c403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8013c9] (ok)
{
	size = 0
	data[10] = 9c4030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801402] (ok)
{
	size = 0
	data[10] = 9c403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80143b] (ok)
{
	size = 0
	data[10] = 9c403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801474] (ok)
{
	size = 0
	data[10] = 9c403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014ad] (ok)
{
	size = 0
	data[10] = 9c500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014e6] (ok)
{
	size = 0
	data[10] = 9c500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80151f] (ok)
{
	size = 0
	data[10] = 9c500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801558] (ok)
{
	size = 0
	data[10] = 9c5001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801591] (ok)
{
	size = 0
	data[10] = 9c500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8015ca] (ok)
{
	size = 0
	data[10] = 9c600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801603] (ok)
{
	size = 0
	data[10] = 9c600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80163c] (ok)
{
	size = 0
	data[10] = 9c600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801675] (ok)
{
	size = 0
	data[10] = 9c6001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801000] (ok)
{
	size = 0
	data[10] = e5402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801039] (ok)
{
	size = 0
	data[10] = e54027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801072] (ok)
{
	size = 0
	data[10] = e5402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58010ab] (ok)
{
	size = 0
	data[10] = e5402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58010e4] (ok)
{
	size = 0
	data[10] = e5402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580111d] (ok)
{
	size = 0
	data[10] = e5402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801156] (ok)
{
	size = 0
	data[10] = e5402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580118f] (ok)
{
	size = 0
	data[10] = e5402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58011c8] (ok)
{
	size = 0
	data[10] = e5402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801201] (ok)
{
	size = 0
	data[10] = e5402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580123a] (ok)
{
	size = 0
	data[10] = e5402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801273] (ok)
{
	size = 0
	data[10] = e5402d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 0
	data[10] = e5402e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012e5] (ok)
{
	size = 0
	data[10] = e5402ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 0
	data[10] = e5402f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801357] (ok)
{
	size = 0
	data[10] = e5402fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801390] (ok)
{
	size = 0
	data[10] = e5403050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58013c9] (ok)
{
	size = 0
	data[10] = e54030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801402] (ok)
{
	size = 0
	data[10] = e5403170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580143b] (ok)
{
	size = 0
	data[10] = e5403200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801474] (ok)
{
	size = 0
	data[10] = e5403290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58014ad] (ok)
{
	size = 0
	data[10] = e5403320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58014e6] (ok)
{
	size = 0
	data[10] = e54033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580151f] (ok)
{
	size = 0
	data[10] = e5403440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801558] (ok)
{
	size = 0
	data[10] = e54034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801591] (ok)
{
	size = 0
	data[10] = e5403560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58015ca] (ok)
{
	size = 0
	data[10] = e54035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801603] (ok)
{
	size = 0
	data[10] = e5403680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580163c] (ok)
{
	size = 0
	data[10] = e5500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e5801675] (ok)
{
	size = 0
	data[10] = e5500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 1
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 2
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 1
	data[10] = e5402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 1
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e58012ac] (ok)
{
	size = 2
	data[10] = e5402e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e580131e] (ok)
{
	size = 2
	data[10] = e5402f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801000] (ok)
{
	size = 0
	data[10] = b1402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801039] (ok)
{
	size = 0
	data[10] = b14027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801072] (ok)
{
	size = 0
	data[10] = b1500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18010ab] (ok)
{
	size = 0
	data[10] = b1500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18010e4] (ok)
{
	size = 0
	data[10] = b1500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180111d] (ok)
{
	size = 0
	data[10] = b15001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801156] (ok)
{
	size = 0
	data[10] = b1500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180118f] (ok)
{
	size = 0
	data[10] = b15002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18011c8] (ok)
{
	size = 0
	data[10] = b1500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801201] (ok)
{
	size = 0
	data[10] = b15003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180123a] (ok)
{
	size = 0
	data[10] = b1500480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801273] (ok)
{
	size = 0
	data[10] = b1500510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 0
	data[10] = b15005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012e5] (ok)
{
	size = 0
	data[10] = b1600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 0
	data[10] = b1500630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801357] (ok)
{
	size = 0
	data[10] = b15006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801390] (ok)
{
	size = 0
	data[10] = b1500750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18013c9] (ok)
{
	size = 0
	data[10] = b15007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801402] (ok)
{
	size = 0
	data[10] = b1500870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180143b] (ok)
{
	size = 0
	data[10] = b1500900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801474] (ok)
{
	size = 0
	data[10] = b1500990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18014ad] (ok)
{
	size = 0
	data[10] = b1402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18014e6] (ok)
{
	size = 0
	data[10] = b1402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180151f] (ok)
{
	size = 0
	data[10] = b1402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801558] (ok)
{
	size = 0
	data[10] = b1402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801591] (ok)
{
	size = 0
	data[10] = b1402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18015ca] (ok)
{
	size = 0
	data[10] = b1402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801603] (ok)
{
	size = 0
	data[10] = b1402bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180163c] (ok)
{
	size = 0
	data[10] = b1402c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b1801675] (ok)
{
	size = 0
	data[10] = b1402cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 1
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 2
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 1
	data[10] = b1500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 1
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b18012ac] (ok)
{
	size = 2
	data[10] = b15005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b180131e] (ok)
{
	size = 2
	data[10] = b1500630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801000] (ok)
{
	size = 0
	data[10] = c7402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801039] (ok)
{
	size = 0
	data[10] = c74027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801072] (ok)
{
	size = 0
	data[10] = c7500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78010ab] (ok)
{
	size = 0
	data[10] = c7500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78010e4] (ok)
{
	size = 0
	data[10] = c7500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780111d] (ok)
{
	size = 0
	data[10] = c75001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801156] (ok)
{
	size = 0
	data[10] = c7500240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780118f] (ok)
{
	size = 0
	data[10] = c75002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78011c8] (ok)
{
	size = 0
	data[10] = c7500360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801201] (ok)
{
	size = 0
	data[10] = c7600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780123a] (ok)
{
	size = 0
	data[10] = c7600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801273] (ok)
{
	size = 0
	data[10] = c7600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 0
	data[10] = c76001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012e5] (ok)
{
	size = 0
	data[10] = c7600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 0
	data[10] = c76002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801357] (ok)
{
	size = 0
	data[10] = c7600360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801390] (ok)
{
	size = 0
	data[10] = c76003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78013c9] (ok)
{
	size = 0
	data[10] = c7600480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801402] (ok)
{
	size = 0
	data[10] = c7600510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780143b] (ok)
{
	size = 0
	data[10] = c76005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801474] (ok)
{
	size = 0
	data[10] = c7600630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78014ad] (ok)
{
	size = 0
	data[10] = c76006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78014e6] (ok)
{
	size = 0
	data[10] = c7600750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780151f] (ok)
{
	size = 0
	data[10] = c76007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801558] (ok)
{
	size = 0
	data[10] = c7600870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801591] (ok)
{
	size = 0
	data[10] = c7600900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78015ca] (ok)
{
	size = 0
	data[10] = c7600990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801603] (ok)
{
	size = 0
	data[10] = c7600a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780163c] (ok)
{
	size = 0
	data[10] = c7600ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 124 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c7801675] (ok)
{
	size = 0
	data[10] = c7600b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 1
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 2
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 1
	data[10] = c76002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 1
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c78012ac] (ok)
{
	size = 2
	data[10] = c76001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 341 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [c780131e] (ok)
{
	size = 2
	data[10] = c76002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001000] (ok)
{
	size = 0
	data[10] = b6c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001039] (ok)
{
	size = 0
	data[10] = b6c027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001072] (ok)
{
	size = 0
	data[10] = b6d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70010ab] (ok)
{
	size = 0
	data[10] = b6d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70010e4] (ok)
{
	size = 0
	data[10] = b6d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700111d] (ok)
{
	size = 0
	data[10] = b6d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001156] (ok)
{
	size = 0
	data[10] = b6d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700118f] (ok)
{
	size = 0
	data[10] = b6d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70011c8] (ok)
{
	size = 0
	data[10] = b6d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001201] (ok)
{
	size = 0
	data[10] = b6d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700123a] (ok)
{
	size = 0
	data[10] = b6d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001273] (ok)
{
	size = 0
	data[10] = b6d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 0
	data[10] = b6d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012e5] (ok)
{
	size = 0
	data[10] = b6d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 0
	data[10] = b6d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001357] (ok)
{
	size = 0
	data[10] = b6e00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001390] (ok)
{
	size = 0
	data[10] = b6e00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70013c9] (ok)
{
	size = 0
	data[10] = b6e00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001402] (ok)
{
	size = 0
	data[10] = b6e001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700143b] (ok)
{
	size = 0
	data[10] = b6e00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001474] (ok)
{
	size = 0
	data[10] = b6e002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70014ad] (ok)
{
	size = 0
	data[10] = b6e00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70014e6] (ok)
{
	size = 0
	data[10] = b6e003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700151f] (ok)
{
	size = 0
	data[10] = b6e00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001558] (ok)
{
	size = 0
	data[10] = b6e00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001591] (ok)
{
	size = 0
	data[10] = b6e005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70015ca] (ok)
{
	size = 0
	data[10] = b6e00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001603] (ok)
{
	size = 0
	data[10] = b6e006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700163c] (ok)
{
	size = 0
	data[10] = b6d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b7001675] (ok)
{
	size = 0
	data[10] = b6d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 1
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 2
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 1
	data[10] = b6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 1
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b70012ac] (ok)
{
	size = 2
	data[10] = b6d005a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 344 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [b700131e] (ok)
{
	size = 2
	data[10] = b6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001000] (ok)
{
	size = 0
	data[10] = eac02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001039] (ok)
{
	size = 0
	data[10] = eac027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001072] (ok)
{
	size = 0
	data[10] = eac02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0010ab] (ok)
{
	size = 0
	data[10] = eac02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0010e4] (ok)
{
	size = 0
	data[10] = eac02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00111d] (ok)
{
	size = 0
	data[10] = eac02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001156] (ok)
{
	size = 0
	data[10] = eac02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00118f] (ok)
{
	size = 0
	data[10] = eac02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0011c8] (ok)
{
	size = 0
	data[10] = eac02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001201] (ok)
{
	size = 0
	data[10] = ead00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00123a] (ok)
{
	size = 0
	data[10] = ead00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001273] (ok)
{
	size = 0
	data[10] = ead00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 0
	data[10] = ead001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012e5] (ok)
{
	size = 0
	data[10] = ead00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 0
	data[10] = ead002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001357] (ok)
{
	size = 0
	data[10] = ead00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001390] (ok)
{
	size = 0
	data[10] = ead003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0013c9] (ok)
{
	size = 0
	data[10] = ead00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001402] (ok)
{
	size = 0
	data[10] = ead00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00143b] (ok)
{
	size = 0
	data[10] = ead005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001474] (ok)
{
	size = 0
	data[10] = ead00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0014ad] (ok)
{
	size = 0
	data[10] = ead006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0014e6] (ok)
{
	size = 0
	data[10] = ead00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00151f] (ok)
{
	size = 0
	data[10] = ead007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001558] (ok)
{
	size = 0
	data[10] = ead00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001591] (ok)
{
	size = 0
	data[10] = ead00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0015ca] (ok)
{
	size = 0
	data[10] = ead00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001603] (ok)
{
	size = 0
	data[10] = ead00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00163c] (ok)
{
	size = 0
	data[10] = ead00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 127 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb001675] (ok)
{
	size = 0
	data[10] = ead00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 1
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 2
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 1
	data[10] = ead002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 1
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb0012ac] (ok)
{
	size = 2
	data[10] = ead001b0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 354 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [eb00131e] (ok)
{
	size = 2
	data[10] = ead002d0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001000] (ok)
{
	size = 0
	data[10] = acc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001039] (ok)
{
	size = 0
	data[10] = acc027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001072] (ok)
{
	size = 0
	data[10] = acc02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0010ab] (ok)
{
	size = 0
	data[10] = acc02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0010e4] (ok)
{
	size = 0
	data[10] = acc02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00111d] (ok)
{
	size = 0
	data[10] = acc02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001156] (ok)
{
	size = 0
	data[10] = acc02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00118f] (ok)
{
	size = 0
	data[10] = acc02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0011c8] (ok)
{
	size = 0
	data[10] = acc02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001201] (ok)
{
	size = 0
	data[10] = acc02c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00123a] (ok)
{
	size = 0
	data[10] = acc02cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001273] (ok)
{
	size = 0
	data[10] = acc02d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 0
	data[10] = acc02e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012e5] (ok)
{
	size = 0
	data[10] = acc02ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 0
	data[10] = acc02f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001357] (ok)
{
	size = 0
	data[10] = acc02fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001390] (ok)
{
	size = 0
	data[10] = acc03050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0013c9] (ok)
{
	size = 0
	data[10] = acc030e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001402] (ok)
{
	size = 0
	data[10] = acc03170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00143b] (ok)
{
	size = 0
	data[10] = acc03200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001474] (ok)
{
	size = 0
	data[10] = acc03290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0014ad] (ok)
{
	size = 0
	data[10] = acc03320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0014e6] (ok)
{
	size = 0
	data[10] = acc033b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00151f] (ok)
{
	size = 0
	data[10] = acc03440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001558] (ok)
{
	size = 0
	data[10] = acc034d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001591] (ok)
{
	size = 0
	data[10] = acc03560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0015ca] (ok)
{
	size = 0
	data[10] = acc035f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001603] (ok)
{
	size = 0
	data[10] = acc03680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00163c] (ok)
{
	size = 0
	data[10] = acc03710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad001675] (ok)
{
	size = 0
	data[10] = acc037a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 1
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 2
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 1
	data[10] = acc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 1
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad0012ac] (ok)
{
	size = 2
	data[10] = acc02e10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ad00131e] (ok)
{
	size = 2
	data[10] = acc02f30
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 0
	data[10] = a8c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 1
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 0
	data[10] = a8c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 1
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 2
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 3
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 4
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 5
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 6
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ece609b0] (ok)
{
	size = 5
	data[10] = a8c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 0
	data[10] = cf402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 1
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 0
	data[10] = cf4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 1
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 2
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 3
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 4
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 5
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 6
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee5669b0] (ok)
{
	size = 5
	data[10] = cf4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 0
	data[10] = a6402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 1
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a6402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a64027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 0
	data[10] = a64027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 1
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 2
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 3
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 4
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 5
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 6
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee7f39b0] (ok)
{
	size = 5
	data[10] = a64027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 0
	data[10] = 28402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 1
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 0
	data[10] = 28500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 1
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 2
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 3
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 6
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30059b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 0
	data[10] = 17c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 1
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 478 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 525 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 0
	data[10] = 17d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 1
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 2
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 3
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 4
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 359 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 5
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 407 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 6
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 443 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e665b9b0] (ok)
{
	size = 5
	data[10] = 17d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 0
	data[10] = 37402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 1
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 0
	data[10] = 37500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 1
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 2
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 3
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 4
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 5
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 6
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ed51b9c0] (ok)
{
	size = 5
	data[10] = 37500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 0
	data[10] = d7402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 1
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d7402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d74027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 0
	data[10] = d74027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 1
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 2
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 3
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 4
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 5
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 6
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb0bc9b0] (ok)
{
	size = 5
	data[10] = d74027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 0
	data[10] = cdc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 1
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 0
	data[10] = cdd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 1
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 2
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 3
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 4
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 5
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 6
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0bc59c0] (ok)
{
	size = 5
	data[10] = cdd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 0
	data[10] = cbc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 1
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 0
	data[10] = cbd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 1
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 2
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 3
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 4
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 5
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 6
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e69d89b0] (ok)
{
	size = 5
	data[10] = cbd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 0
	data[10] = 40402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 1
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 0
	data[10] = 40500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 1
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 2
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 3
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 4
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 5
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 6
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e35919b0] (ok)
{
	size = 5
	data[10] = 40500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 0
	data[10] = f5402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 1
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f5402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f54027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 0
	data[10] = f54027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 1
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 2
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 3
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 4
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 5
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 6
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1e1e9b0] (ok)
{
	size = 5
	data[10] = f54027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 0
	data[10] = 95c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 1
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 0
	data[10] = 95c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 1
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 2
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 3
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 4
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 5
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 6
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e753b9b0] (ok)
{
	size = 5
	data[10] = 95c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 0
	data[10] = da402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 1
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 0
	data[10] = da4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 1
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 2
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 3
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 4
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 5
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 6
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e6b5a9b0] (ok)
{
	size = 5
	data[10] = da4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 0
	data[10] = 4e402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 1
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 0
	data[10] = 4e4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 1
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 2
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 3
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 4
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 5
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 6
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e63fc9b0] (ok)
{
	size = 5
	data[10] = 4e4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 0
	data[10] = 54c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 1
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 0
	data[10] = 54c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 1
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 2
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 3
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 4
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 5
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 6
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e1c919b0] (ok)
{
	size = 5
	data[10] = 54c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 0
	data[10] = 35c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 1
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 482 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 529 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 0
	data[10] = 35d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 1
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 2
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 3
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 4
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 5
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 6
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 447 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8fee9b0] (ok)
{
	size = 5
	data[10] = 35d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 0
	data[10] = 13c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 1
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 482 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 529 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 0
	data[10] = 13d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 1
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 2
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 3
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 4
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 363 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 5
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 411 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 6
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 447 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eb1159b0] (ok)
{
	size = 5
	data[10] = 13d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 0
	data[10] = 16c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 1
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 0
	data[10] = 16c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 1
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 2
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 3
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 4
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 5
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 6
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e67149b0] (ok)
{
	size = 5
	data[10] = 16c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 0
	data[10] = 82c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 1
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 0
	data[10] = 82d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 1
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 2
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 3
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 4
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 5
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 6
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e5bed9c0] (ok)
{
	size = 5
	data[10] = 82d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 0
	data[10] = 4b402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 1
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 0
	data[10] = 4b4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 1
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 2
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 3
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 4
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 5
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 6
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e62059b0] (ok)
{
	size = 5
	data[10] = 4b4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 0
	data[10] = 77402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 1
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 0
	data[10] = 77500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 1
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 2
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 3
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 4
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 5
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 6
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e73479b0] (ok)
{
	size = 5
	data[10] = 77500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 0
	data[10] = 9bc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 1
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 0
	data[10] = 9bc027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 1
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 2
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 3
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 4
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 5
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 6
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4f6e9c0] (ok)
{
	size = 5
	data[10] = 9bc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 0
	data[10] = 2fc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 1
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 0
	data[10] = 2fc027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 1
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 2
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 3
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 4
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 5
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 6
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [dff5d9b0] (ok)
{
	size = 5
	data[10] = 2fc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 0
	data[10] = dac02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 1
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 409 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 480 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 527 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 0
	data[10] = dac027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 1
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 2
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 3
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 4
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 361 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 409 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 6
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 445 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee16b9b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 0
	data[10] = 58402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 1
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 58402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 584027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 0
	data[10] = 584027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 1
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 2
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 3
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 4
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 5
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 6
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ee4cc9b0] (ok)
{
	size = 5
	data[10] = 584027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 0
	data[10] = 91402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 1
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 914027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 0
	data[10] = 914027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 1
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 2
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 3
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 4
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 6
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e87aa9b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 0
	data[10] = 91402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 1
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 91402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 914027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 0
	data[10] = 914027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 1
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 2
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 3
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 4
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 6
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e16b39b0] (ok)
{
	size = 5
	data[10] = 914027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 0
	data[10] = 7bc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 1
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 2
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 3
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 2
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 3
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 4
	data[10] = 7bc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 4
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 0
	data[10] = 7bd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 1
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 2
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 3
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 4
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 5
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 6
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e8dc09b0] (ok)
{
	size = 5
	data[10] = 7bd00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000000] (ok)
{
	size = 0
	data[10] = 7be00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000039] (ok)
{
	size = 0
	data[10] = 7be00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000072] (ok)
{
	size = 0
	data[10] = 7be00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0000ab] (ok)
{
	size = 0
	data[10] = 7be001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0000e4] (ok)
{
	size = 0
	data[10] = 7be00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00011d] (ok)
{
	size = 0
	data[10] = 7be002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000156] (ok)
{
	size = 0
	data[10] = 7be00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00018f] (ok)
{
	size = 0
	data[10] = 7be003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0001c8] (ok)
{
	size = 0
	data[10] = 7bd00060
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000201] (ok)
{
	size = 0
	data[10] = 7bd00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00023a] (ok)
{
	size = 0
	data[10] = 7bd00140
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000273] (ok)
{
	size = 0
	data[10] = 7bd001d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002ac] (ok)
{
	size = 0
	data[10] = 7bd00260
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002e5] (ok)
{
	size = 0
	data[10] = 7bd002f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00031e] (ok)
{
	size = 0
	data[10] = 7bd00380
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000357] (ok)
{
	size = 0
	data[10] = 7bd00410
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000390] (ok)
{
	size = 0
	data[10] = 7bd004a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0003c9] (ok)
{
	size = 0
	data[10] = 7bd00530
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000402] (ok)
{
	size = 0
	data[10] = 7bd005c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00043b] (ok)
{
	size = 0
	data[10] = 7bd00650
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000474] (ok)
{
	size = 0
	data[10] = 7bd006e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0004ad] (ok)
{
	size = 0
	data[10] = 7bd00770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0004e6] (ok)
{
	size = 0
	data[10] = 7bd00800
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00051f] (ok)
{
	size = 0
	data[10] = 7bd00890
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000558] (ok)
{
	size = 0
	data[10] = 7bd00920
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000591] (ok)
{
	size = 0
	data[10] = 7bd009b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0005ca] (ok)
{
	size = 0
	data[10] = 7bd00a40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000603] (ok)
{
	size = 0
	data[10] = 7bd00ad0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00063c] (ok)
{
	size = 0
	data[10] = 7bd00b60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d000675] (ok)
{
	size = 0
	data[10] = 7bd00bf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002ac] (ok)
{
	size = 1
	data[10] = 7bd00260
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002ac] (ok)
{
	size = 2
	data[10] = 7bd00260
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00031e] (ok)
{
	size = 1
	data[10] = 7bd00380
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002ac] (ok)
{
	size = 1
	data[10] = 7bd00260
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d0002ac] (ok)
{
	size = 2
	data[10] = 7bd00260
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7d00031e] (ok)
{
	size = 2
	data[10] = 7bd00380
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 0
	data[10] = cdc02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 1
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 2
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 3
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 4
	data[10] = cdc02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 4
	data[10] = cdc027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 0
	data[10] = cdc027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 1
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 2
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 3
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 4
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 5
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 6
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e09f79b0] (ok)
{
	size = 5
	data[10] = cdc027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800000] (ok)
{
	size = 0
	data[10] = cdd00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800039] (ok)
{
	size = 0
	data[10] = cdd00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800072] (ok)
{
	size = 0
	data[10] = cdd00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8000ab] (ok)
{
	size = 0
	data[10] = cdd001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8000e4] (ok)
{
	size = 0
	data[10] = cdd00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80011d] (ok)
{
	size = 0
	data[10] = cdd002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800156] (ok)
{
	size = 0
	data[10] = cdd00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80018f] (ok)
{
	size = 0
	data[10] = cdd003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8001c8] (ok)
{
	size = 0
	data[10] = cdd00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800201] (ok)
{
	size = 0
	data[10] = cdd00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80023a] (ok)
{
	size = 0
	data[10] = cdc02770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800273] (ok)
{
	size = 0
	data[10] = cdc027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002ac] (ok)
{
	size = 0
	data[10] = cdc02860
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002e5] (ok)
{
	size = 0
	data[10] = cdc028f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80031e] (ok)
{
	size = 0
	data[10] = cdc02980
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800357] (ok)
{
	size = 0
	data[10] = cdc02a10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800390] (ok)
{
	size = 0
	data[10] = cdc02aa0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8003c9] (ok)
{
	size = 0
	data[10] = cdc02b30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800402] (ok)
{
	size = 0
	data[10] = cdc02bc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80043b] (ok)
{
	size = 0
	data[10] = cdc02c50
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800474] (ok)
{
	size = 0
	data[10] = cdc02ce0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8004ad] (ok)
{
	size = 0
	data[10] = cdc02d70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8004e6] (ok)
{
	size = 0
	data[10] = cdc02e00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80051f] (ok)
{
	size = 0
	data[10] = cdc02e90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800558] (ok)
{
	size = 0
	data[10] = cdc02f20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800591] (ok)
{
	size = 0
	data[10] = cdc02fb0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8005ca] (ok)
{
	size = 0
	data[10] = cdc03040
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800603] (ok)
{
	size = 0
	data[10] = cdc030d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80063c] (ok)
{
	size = 0
	data[10] = cdc03160
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce800675] (ok)
{
	size = 0
	data[10] = cdc031f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002ac] (ok)
{
	size = 1
	data[10] = cdc02860
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002ac] (ok)
{
	size = 2
	data[10] = cdc02860
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80031e] (ok)
{
	size = 1
	data[10] = cdc02980
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002ac] (ok)
{
	size = 1
	data[10] = cdc02860
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce8002ac] (ok)
{
	size = 2
	data[10] = cdc02860
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ce80031e] (ok)
{
	size = 2
	data[10] = cdc02980
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 0
	data[10] = 1d402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 1
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 2
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 3
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 2
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 3
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 4
	data[10] = 1d402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 4
	data[10] = 1d4027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 0
	data[10] = 1d4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 1
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 2
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 3
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 4
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 5
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 6
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ecb9c9c0] (ok)
{
	size = 5
	data[10] = 1d4027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801000] (ok)
{
	size = 0
	data[10] = 1d500080
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801039] (ok)
{
	size = 0
	data[10] = 1d500110
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801072] (ok)
{
	size = 0
	data[10] = 1d5001a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8010ab] (ok)
{
	size = 0
	data[10] = 1d500230
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8010e4] (ok)
{
	size = 0
	data[10] = 1d5002c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80111d] (ok)
{
	size = 0
	data[10] = 1d500350
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801156] (ok)
{
	size = 0
	data[10] = 1d5003e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80118f] (ok)
{
	size = 0
	data[10] = 1d500470
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8011c8] (ok)
{
	size = 0
	data[10] = 1d500500
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801201] (ok)
{
	size = 0
	data[10] = 1d500590
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80123a] (ok)
{
	size = 0
	data[10] = 1d500620
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801273] (ok)
{
	size = 0
	data[10] = 1d5006b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012ac] (ok)
{
	size = 0
	data[10] = 1d500740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012e5] (ok)
{
	size = 0
	data[10] = 1d5007d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80131e] (ok)
{
	size = 0
	data[10] = 1d500860
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801357] (ok)
{
	size = 0
	data[10] = 1d5008f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801390] (ok)
{
	size = 0
	data[10] = 1d500980
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8013c9] (ok)
{
	size = 0
	data[10] = 1d600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801402] (ok)
{
	size = 0
	data[10] = 1d600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80143b] (ok)
{
	size = 0
	data[10] = 1d600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801474] (ok)
{
	size = 0
	data[10] = 1d6001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8014ad] (ok)
{
	size = 0
	data[10] = 1d600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8014e6] (ok)
{
	size = 0
	data[10] = 1d6002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80151f] (ok)
{
	size = 0
	data[10] = 1d600360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801558] (ok)
{
	size = 0
	data[10] = 1d6003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801591] (ok)
{
	size = 0
	data[10] = 1d600480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8015ca] (ok)
{
	size = 0
	data[10] = 1d600510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801603] (ok)
{
	size = 0
	data[10] = 1d6005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80163c] (ok)
{
	size = 0
	data[10] = 1d600630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e801675] (ok)
{
	size = 0
	data[10] = 1d6006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012ac] (ok)
{
	size = 1
	data[10] = 1d500740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012ac] (ok)
{
	size = 2
	data[10] = 1d500740
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80131e] (ok)
{
	size = 1
	data[10] = 1d500860
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012ac] (ok)
{
	size = 1
	data[10] = 1d500740
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e8012ac] (ok)
{
	size = 2
	data[10] = 1d500740
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [1e80131e] (ok)
{
	size = 2
	data[10] = 1d500860
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 0
	data[10] = 91d025e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 1
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 2
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 3
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 2
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 3
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 4
	data[10] = 91d025e0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 4
	data[10] = 91d02670
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 0
	data[10] = 91d02640
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 1
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 2
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 3
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 4
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 5
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 6
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e0fff9b0] (ok)
{
	size = 5
	data[10] = 91d02640
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800000] (ok)
{
	size = 0
	data[10] = 91e00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800039] (ok)
{
	size = 0
	data[10] = 91e00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800072] (ok)
{
	size = 0
	data[10] = 91e00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938000ab] (ok)
{
	size = 0
	data[10] = 91e001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938000e4] (ok)
{
	size = 0
	data[10] = 91e00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380011d] (ok)
{
	size = 0
	data[10] = 91c00170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800156] (ok)
{
	size = 0
	data[10] = 91c00200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380018f] (ok)
{
	size = 0
	data[10] = 91c00290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938001c8] (ok)
{
	size = 0
	data[10] = 91c00320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800201] (ok)
{
	size = 0
	data[10] = 91c003b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380023a] (ok)
{
	size = 0
	data[10] = 91c00440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800273] (ok)
{
	size = 0
	data[10] = 91c004d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002ac] (ok)
{
	size = 0
	data[10] = 91c00560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002e5] (ok)
{
	size = 0
	data[10] = 91c005f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380031e] (ok)
{
	size = 0
	data[10] = 91c00680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800357] (ok)
{
	size = 0
	data[10] = 91c00710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800390] (ok)
{
	size = 0
	data[10] = 91f00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938003c9] (ok)
{
	size = 0
	data[10] = 91f00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800402] (ok)
{
	size = 0
	data[10] = 91c007a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380043b] (ok)
{
	size = 0
	data[10] = 91e002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800474] (ok)
{
	size = 0
	data[10] = 91c00830
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938004ad] (ok)
{
	size = 0
	data[10] = 91c008c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938004e6] (ok)
{
	size = 0
	data[10] = 91c00950
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380051f] (ok)
{
	size = 0
	data[10] = 91c009e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800558] (ok)
{
	size = 0
	data[10] = 91c00a70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800591] (ok)
{
	size = 0
	data[10] = 91c00b00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938005ca] (ok)
{
	size = 0
	data[10] = 91c00b90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800603] (ok)
{
	size = 0
	data[10] = 91c00c20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380063c] (ok)
{
	size = 0
	data[10] = 91c00cb0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [93800675] (ok)
{
	size = 0
	data[10] = 91c00d40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002ac] (ok)
{
	size = 1
	data[10] = 91c00560
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002ac] (ok)
{
	size = 2
	data[10] = 91c00560
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380031e] (ok)
{
	size = 1
	data[10] = 91c00680
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002ac] (ok)
{
	size = 1
	data[10] = 91c00560
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [938002ac] (ok)
{
	size = 2
	data[10] = 91c00560
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9380031e] (ok)
{
	size = 2
	data[10] = 91c00680
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 0
	data[10] = d6f00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 1
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 2
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 3
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 2
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 3
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 4
	data[10] = d6f00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 4
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 0
	data[10] = d6c02050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 1
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 2
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 3
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 4
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 5
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 6
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e9d319b0] (ok)
{
	size = 5
	data[10] = d6c02050
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000000] (ok)
{
	size = 0
	data[10] = d6d00690
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000039] (ok)
{
	size = 0
	data[10] = d6d00720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000072] (ok)
{
	size = 0
	data[10] = d6d007b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80000ab] (ok)
{
	size = 0
	data[10] = d6d00840
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80000e4] (ok)
{
	size = 0
	data[10] = d6d008d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800011d] (ok)
{
	size = 0
	data[10] = d6d00960
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000156] (ok)
{
	size = 0
	data[10] = d6d009f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800018f] (ok)
{
	size = 0
	data[10] = d6d00a80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80001c8] (ok)
{
	size = 0
	data[10] = d6d00b10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000201] (ok)
{
	size = 0
	data[10] = d6d00ba0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800023a] (ok)
{
	size = 0
	data[10] = d6d00c30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000273] (ok)
{
	size = 0
	data[10] = d6e000e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002ac] (ok)
{
	size = 0
	data[10] = d6e00170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002e5] (ok)
{
	size = 0
	data[10] = d6e00200
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800031e] (ok)
{
	size = 0
	data[10] = d6e00290
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000357] (ok)
{
	size = 0
	data[10] = d6e00320
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000390] (ok)
{
	size = 0
	data[10] = d6e003b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80003c9] (ok)
{
	size = 0
	data[10] = d6e00440
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000402] (ok)
{
	size = 0
	data[10] = d6e004d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800043b] (ok)
{
	size = 0
	data[10] = d6e00560
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000474] (ok)
{
	size = 0
	data[10] = d6e005f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80004ad] (ok)
{
	size = 0
	data[10] = d6e00680
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80004e6] (ok)
{
	size = 0
	data[10] = d6e00710
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800051f] (ok)
{
	size = 0
	data[10] = d6e007a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000558] (ok)
{
	size = 0
	data[10] = d6e00830
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000591] (ok)
{
	size = 0
	data[10] = d6e008c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80005ca] (ok)
{
	size = 0
	data[10] = d6e00950
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000603] (ok)
{
	size = 0
	data[10] = d6e009e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800063c] (ok)
{
	size = 0
	data[10] = d6e00a70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d8000675] (ok)
{
	size = 0
	data[10] = d6e00b00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002ac] (ok)
{
	size = 1
	data[10] = d6e00170
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002ac] (ok)
{
	size = 2
	data[10] = d6e00170
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800031e] (ok)
{
	size = 1
	data[10] = d6e00290
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002ac] (ok)
{
	size = 1
	data[10] = d6e00170
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d80002ac] (ok)
{
	size = 2
	data[10] = d6e00170
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d800031e] (ok)
{
	size = 2
	data[10] = d6e00290
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 0
	data[10] = f6c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 1
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 2
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 3
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 2
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 3
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 4
	data[10] = f6c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 4
	data[10] = f6c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 0
	data[10] = f6c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 1
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 2
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 3
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 4
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 5
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 6
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e96e99b0] (ok)
{
	size = 5
	data[10] = f6c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800000] (ok)
{
	size = 0
	data[10] = f6d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800039] (ok)
{
	size = 0
	data[10] = f6d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800072] (ok)
{
	size = 0
	data[10] = f6d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78000ab] (ok)
{
	size = 0
	data[10] = f6d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78000e4] (ok)
{
	size = 0
	data[10] = f6d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780011d] (ok)
{
	size = 0
	data[10] = f6d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800156] (ok)
{
	size = 0
	data[10] = f6d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780018f] (ok)
{
	size = 0
	data[10] = f6d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78001c8] (ok)
{
	size = 0
	data[10] = f6d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800201] (ok)
{
	size = 0
	data[10] = f6d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780023a] (ok)
{
	size = 0
	data[10] = f6d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800273] (ok)
{
	size = 0
	data[10] = f6d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002ac] (ok)
{
	size = 0
	data[10] = f6d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002e5] (ok)
{
	size = 0
	data[10] = f6d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780031e] (ok)
{
	size = 0
	data[10] = f6d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800357] (ok)
{
	size = 0
	data[10] = f6d00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800390] (ok)
{
	size = 0
	data[10] = f6d00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78003c9] (ok)
{
	size = 0
	data[10] = f6d00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800402] (ok)
{
	size = 0
	data[10] = f6d00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780043b] (ok)
{
	size = 0
	data[10] = f6d00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800474] (ok)
{
	size = 0
	data[10] = f6d00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78004ad] (ok)
{
	size = 0
	data[10] = f6d00bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78004e6] (ok)
{
	size = 0
	data[10] = f6d00c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780051f] (ok)
{
	size = 0
	data[10] = f6c02770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800558] (ok)
{
	size = 0
	data[10] = f6c027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800591] (ok)
{
	size = 0
	data[10] = f6c02860
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78005ca] (ok)
{
	size = 0
	data[10] = f6c028f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800603] (ok)
{
	size = 0
	data[10] = f6c02980
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780063c] (ok)
{
	size = 0
	data[10] = f6c02a10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f7800675] (ok)
{
	size = 0
	data[10] = f6c02aa0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002ac] (ok)
{
	size = 1
	data[10] = f6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002ac] (ok)
{
	size = 2
	data[10] = f6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780031e] (ok)
{
	size = 1
	data[10] = f6d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002ac] (ok)
{
	size = 1
	data[10] = f6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f78002ac] (ok)
{
	size = 2
	data[10] = f6d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [f780031e] (ok)
{
	size = 2
	data[10] = f6d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 0
	data[10] = 28402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 1
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 2
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 3
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 4
	data[10] = 28402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 0
	data[10] = 28500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 1
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 2
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 3
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 4
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 6
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e78079b0] (ok)
{
	size = 5
	data[10] = 28500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000000] (ok)
{
	size = 0
	data[10] = 28700000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000039] (ok)
{
	size = 0
	data[10] = 28700090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000072] (ok)
{
	size = 0
	data[10] = 28700120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0000ab] (ok)
{
	size = 0
	data[10] = 287001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0000e4] (ok)
{
	size = 0
	data[10] = 28700240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00011d] (ok)
{
	size = 0
	data[10] = 287002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000156] (ok)
{
	size = 0
	data[10] = 28700360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00018f] (ok)
{
	size = 0
	data[10] = 287003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0001c8] (ok)
{
	size = 0
	data[10] = 28700480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000201] (ok)
{
	size = 0
	data[10] = 28700510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00023a] (ok)
{
	size = 0
	data[10] = 287005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000273] (ok)
{
	size = 0
	data[10] = 28700630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002ac] (ok)
{
	size = 0
	data[10] = 287006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002e5] (ok)
{
	size = 0
	data[10] = 28700750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00031e] (ok)
{
	size = 0
	data[10] = 287007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000357] (ok)
{
	size = 0
	data[10] = 28700870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000390] (ok)
{
	size = 0
	data[10] = 28700900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0003c9] (ok)
{
	size = 0
	data[10] = 28700990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000402] (ok)
{
	size = 0
	data[10] = 28700a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00043b] (ok)
{
	size = 0
	data[10] = 28700ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000474] (ok)
{
	size = 0
	data[10] = 28700b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0004ad] (ok)
{
	size = 0
	data[10] = 28700bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0004e6] (ok)
{
	size = 0
	data[10] = 28700c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00051f] (ok)
{
	size = 0
	data[10] = 28700cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000558] (ok)
{
	size = 0
	data[10] = 28700d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000591] (ok)
{
	size = 0
	data[10] = 28700e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0005ca] (ok)
{
	size = 0
	data[10] = 28700ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000603] (ok)
{
	size = 0
	data[10] = 28700f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00063c] (ok)
{
	size = 0
	data[10] = 28700fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a000675] (ok)
{
	size = 0
	data[10] = 28701050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002ac] (ok)
{
	size = 1
	data[10] = 287006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002ac] (ok)
{
	size = 2
	data[10] = 287006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00031e] (ok)
{
	size = 1
	data[10] = 287007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002ac] (ok)
{
	size = 1
	data[10] = 287006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a0002ac] (ok)
{
	size = 2
	data[10] = 287006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2a00031e] (ok)
{
	size = 2
	data[10] = 287007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 0
	data[10] = 9bd00040
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 1
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 2
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 3
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 2
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 3
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 4
	data[10] = 9bd00040
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 4
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 0
	data[10] = 9bc020c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 1
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 2
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 3
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 4
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 5
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 6
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e2b899b0] (ok)
{
	size = 5
	data[10] = 9bc020c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801000] (ok)
{
	size = 0
	data[10] = 9be006b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801039] (ok)
{
	size = 0
	data[10] = 9be00740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801072] (ok)
{
	size = 0
	data[10] = 9bc020f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010ab] (ok)
{
	size = 0
	data[10] = 9bc02120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8010e4] (ok)
{
	size = 0
	data[10] = 9bc021b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80111d] (ok)
{
	size = 0
	data[10] = 9bd000a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801156] (ok)
{
	size = 0
	data[10] = 9bd000d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80118f] (ok)
{
	size = 0
	data[10] = 9bd00170
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8011c8] (ok)
{
	size = 0
	data[10] = 9bc02240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801201] (ok)
{
	size = 0
	data[10] = 9bc022d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80123a] (ok)
{
	size = 0
	data[10] = 9bc02360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801273] (ok)
{
	size = 0
	data[10] = 9bc023f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 0
	data[10] = 9bc02480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012e5] (ok)
{
	size = 0
	data[10] = 9bc02510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80131e] (ok)
{
	size = 0
	data[10] = 9bc025a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801357] (ok)
{
	size = 0
	data[10] = 9bc02630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801390] (ok)
{
	size = 0
	data[10] = 9bc026c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8013c9] (ok)
{
	size = 0
	data[10] = 9bc02750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801402] (ok)
{
	size = 0
	data[10] = 9bc027e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80143b] (ok)
{
	size = 0
	data[10] = 9bc02870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801474] (ok)
{
	size = 0
	data[10] = 9bc02900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014ad] (ok)
{
	size = 0
	data[10] = 9bc02990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8014e6] (ok)
{
	size = 0
	data[10] = 9bc02a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80151f] (ok)
{
	size = 0
	data[10] = 9bc02ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801558] (ok)
{
	size = 0
	data[10] = 9bc02b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801591] (ok)
{
	size = 0
	data[10] = 9bc02bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8015ca] (ok)
{
	size = 0
	data[10] = 9bc02c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801603] (ok)
{
	size = 0
	data[10] = 9bc02cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80163c] (ok)
{
	size = 0
	data[10] = 9bc02d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c801675] (ok)
{
	size = 0
	data[10] = 9bc02e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 1
	data[10] = 9bc02480
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 2
	data[10] = 9bc02480
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80131e] (ok)
{
	size = 1
	data[10] = 9bc025a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 1
	data[10] = 9bc02480
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c8012ac] (ok)
{
	size = 2
	data[10] = 9bc02480
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [9c80131e] (ok)
{
	size = 2
	data[10] = 9bc025a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 0
	data[10] = 70c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 1
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 2
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 3
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 2
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 3
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 4
	data[10] = 70c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 4
	data[10] = 70c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 0
	data[10] = 70c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 1
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 2
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 3
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 4
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 5
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 6
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e103f9b0] (ok)
{
	size = 5
	data[10] = 70c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800000] (ok)
{
	size = 0
	data[10] = 70d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800039] (ok)
{
	size = 0
	data[10] = 70d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800072] (ok)
{
	size = 0
	data[10] = 70d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718000ab] (ok)
{
	size = 0
	data[10] = 70d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718000e4] (ok)
{
	size = 0
	data[10] = 70d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180011d] (ok)
{
	size = 0
	data[10] = 70d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800156] (ok)
{
	size = 0
	data[10] = 70d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180018f] (ok)
{
	size = 0
	data[10] = 70d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718001c8] (ok)
{
	size = 0
	data[10] = 70d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800201] (ok)
{
	size = 0
	data[10] = 70c02770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180023a] (ok)
{
	size = 0
	data[10] = 70c027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800273] (ok)
{
	size = 0
	data[10] = 70c02860
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002ac] (ok)
{
	size = 0
	data[10] = 70c028f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002e5] (ok)
{
	size = 0
	data[10] = 70c02980
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180031e] (ok)
{
	size = 0
	data[10] = 70c02a10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800357] (ok)
{
	size = 0
	data[10] = 70c02aa0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800390] (ok)
{
	size = 0
	data[10] = 70c02b30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718003c9] (ok)
{
	size = 0
	data[10] = 70d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800402] (ok)
{
	size = 0
	data[10] = 70d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180043b] (ok)
{
	size = 0
	data[10] = 70d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800474] (ok)
{
	size = 0
	data[10] = 70d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718004ad] (ok)
{
	size = 0
	data[10] = 70d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718004e6] (ok)
{
	size = 0
	data[10] = 70d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180051f] (ok)
{
	size = 0
	data[10] = 70c02bc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800558] (ok)
{
	size = 0
	data[10] = 70c02c50
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800591] (ok)
{
	size = 0
	data[10] = 70c02ce0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718005ca] (ok)
{
	size = 0
	data[10] = 70c02d70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800603] (ok)
{
	size = 0
	data[10] = 70c02e00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180063c] (ok)
{
	size = 0
	data[10] = 70c02e90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [71800675] (ok)
{
	size = 0
	data[10] = 70c02f20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002ac] (ok)
{
	size = 1
	data[10] = 70c028f0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002ac] (ok)
{
	size = 2
	data[10] = 70c028f0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180031e] (ok)
{
	size = 1
	data[10] = 70c02a10
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002ac] (ok)
{
	size = 1
	data[10] = 70c028f0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] = 233;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [718002ac] (ok)
{
	size = 2
	data[10] = 70c028f0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [7180031e] (ok)
{
	size = 2
	data[10] = 70c02a10
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 0
	data[10] = ad402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 1
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 2
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 3
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 2
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 3
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 4
	data[10] = ad402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 4
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 0
	data[10] = ad500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 1
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 2
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 3
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 4
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 5
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 6
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e4b849c0] (ok)
{
	size = 5
	data[10] = ad500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800000] (ok)
{
	size = 0
	data[10] = ad600000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800039] (ok)
{
	size = 0
	data[10] = ad600090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800072] (ok)
{
	size = 0
	data[10] = ad600120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8000ab] (ok)
{
	size = 0
	data[10] = ad6001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8000e4] (ok)
{
	size = 0
	data[10] = ad600240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80011d] (ok)
{
	size = 0
	data[10] = ad6002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800156] (ok)
{
	size = 0
	data[10] = ad600360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80018f] (ok)
{
	size = 0
	data[10] = ad6003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8001c8] (ok)
{
	size = 0
	data[10] = ad600480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800201] (ok)
{
	size = 0
	data[10] = ad600510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80023a] (ok)
{
	size = 0
	data[10] = ad6005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800273] (ok)
{
	size = 0
	data[10] = ad600630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8002ac] (ok)
{
	size = 0
	data[10] = ad6006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8002e5] (ok)
{
	size = 0
	data[10] = ad600750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80031e] (ok)
{
	size = 0
	data[10] = ad6007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800357] (ok)
{
	size = 0
	data[10] = ad600870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800390] (ok)
{
	size = 0
	data[10] = ad600900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8003c9] (ok)
{
	size = 0
	data[10] = ad600990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800402] (ok)
{
	size = 0
	data[10] = ad4027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80043b] (ok)
{
	size = 0
	data[10] = ad4027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800474] (ok)
{
	size = 0
	data[10] = ad402870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8004ad] (ok)
{
	size = 0
	data[10] = ad402900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8004e6] (ok)
{
	size = 0
	data[10] = ad402990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80051f] (ok)
{
	size = 0
	data[10] = ad402a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800558] (ok)
{
	size = 0
	data[10] = ad402ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800591] (ok)
{
	size = 0
	data[10] = ad402b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8005ca] (ok)
{
	size = 0
	data[10] = ad700000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800603] (ok)
{
	size = 0
	data[10] = ad700090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80063c] (ok)
{
	size = 0
	data[10] = ad700120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae800675] (ok)
{
	size = 0
	data[10] = ad7001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8002ac] (ok)
{
	size = 1
	data[10] = ad6006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae8002ac] (ok)
{
	size = 2
	data[10] = ad6006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [ae80031e] (ok)
{
	size = 1
	data[10] = ad6007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 0
	data[10] = 64402740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 1
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 2
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 3
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 2
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 3
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 4
	data[10] = 64402740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 4
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 0
	data[10] = 64500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 1
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 2
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 3
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 4
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 5
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 6
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e88999b0] (ok)
{
	size = 5
	data[10] = 64500000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001000] (ok)
{
	size = 0
	data[10] = 64500060
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001039] (ok)
{
	size = 0
	data[10] = 64700000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001072] (ok)
{
	size = 0
	data[10] = 64700090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650010ab] (ok)
{
	size = 0
	data[10] = 64700120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650010e4] (ok)
{
	size = 0
	data[10] = 647001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500111d] (ok)
{
	size = 0
	data[10] = 64700240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001156] (ok)
{
	size = 0
	data[10] = 647002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500118f] (ok)
{
	size = 0
	data[10] = 64600080
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650011c8] (ok)
{
	size = 0
	data[10] = 64600110
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001201] (ok)
{
	size = 0
	data[10] = 646001a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500123a] (ok)
{
	size = 0
	data[10] = 64600230
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001273] (ok)
{
	size = 0
	data[10] = 646002c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012ac] (ok)
{
	size = 0
	data[10] = 64600350
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012e5] (ok)
{
	size = 0
	data[10] = 646003e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500131e] (ok)
{
	size = 0
	data[10] = 64600470
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001357] (ok)
{
	size = 0
	data[10] = 64600500
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001390] (ok)
{
	size = 0
	data[10] = 64600590
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650013c9] (ok)
{
	size = 0
	data[10] = 64600620
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001402] (ok)
{
	size = 0
	data[10] = 646006b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500143b] (ok)
{
	size = 0
	data[10] = 64700360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001474] (ok)
{
	size = 0
	data[10] = 647003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650014ad] (ok)
{
	size = 0
	data[10] = 64700480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650014e6] (ok)
{
	size = 0
	data[10] = 64700510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500151f] (ok)
{
	size = 0
	data[10] = 647005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001558] (ok)
{
	size = 0
	data[10] = 64700630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001591] (ok)
{
	size = 0
	data[10] = 647006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650015ca] (ok)
{
	size = 0
	data[10] = 64700750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001603] (ok)
{
	size = 0
	data[10] = 647007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500163c] (ok)
{
	size = 0
	data[10] = 64700870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [65001675] (ok)
{
	size = 0
	data[10] = 64700900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012ac] (ok)
{
	size = 1
	data[10] = 64600350
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012ac] (ok)
{
	size = 2
	data[10] = 64600350
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500131e] (ok)
{
	size = 1
	data[10] = 64600470
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012ac] (ok)
{
	size = 1
	data[10] = 64600350
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [650012ac] (ok)
{
	size = 2
	data[10] = 64600350
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [6500131e] (ok)
{
	size = 2
	data[10] = 64600470
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 0
	data[10] = d4c02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 1
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 2
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 3
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 2
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 3
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 4
	data[10] = d4c02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 4
	data[10] = d4c027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 0
	data[10] = d4c027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 1
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 2
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 3
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 4
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 5
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 6
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e30049b0] (ok)
{
	size = 5
	data[10] = d4c027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800000] (ok)
{
	size = 0
	data[10] = d4d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800039] (ok)
{
	size = 0
	data[10] = d4d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800072] (ok)
{
	size = 0
	data[10] = d4d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58000ab] (ok)
{
	size = 0
	data[10] = d4d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58000e4] (ok)
{
	size = 0
	data[10] = d4d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580011d] (ok)
{
	size = 0
	data[10] = d4d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800156] (ok)
{
	size = 0
	data[10] = d4d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580018f] (ok)
{
	size = 0
	data[10] = d4d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58001c8] (ok)
{
	size = 0
	data[10] = d4d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800201] (ok)
{
	size = 0
	data[10] = d4d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580023a] (ok)
{
	size = 0
	data[10] = d4d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800273] (ok)
{
	size = 0
	data[10] = d4d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002ac] (ok)
{
	size = 0
	data[10] = d4d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002e5] (ok)
{
	size = 0
	data[10] = d4d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580031e] (ok)
{
	size = 0
	data[10] = d4d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800357] (ok)
{
	size = 0
	data[10] = d4d00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800390] (ok)
{
	size = 0
	data[10] = d4d00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58003c9] (ok)
{
	size = 0
	data[10] = d4d00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800402] (ok)
{
	size = 0
	data[10] = d4d00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580043b] (ok)
{
	size = 0
	data[10] = d4d00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800474] (ok)
{
	size = 0
	data[10] = d4d00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58004ad] (ok)
{
	size = 0
	data[10] = d4d00bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58004e6] (ok)
{
	size = 0
	data[10] = d4e00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580051f] (ok)
{
	size = 0
	data[10] = d4e00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800558] (ok)
{
	size = 0
	data[10] = d4e00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800591] (ok)
{
	size = 0
	data[10] = d4e001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58005ca] (ok)
{
	size = 0
	data[10] = d4e00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800603] (ok)
{
	size = 0
	data[10] = d4e002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580063c] (ok)
{
	size = 0
	data[10] = d4e00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d5800675] (ok)
{
	size = 0
	data[10] = d4e003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002ac] (ok)
{
	size = 1
	data[10] = d4d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002ac] (ok)
{
	size = 2
	data[10] = d4d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580031e] (ok)
{
	size = 1
	data[10] = d4d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002ac] (ok)
{
	size = 1
	data[10] = d4d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d58002ac] (ok)
{
	size = 2
	data[10] = d4d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [d580031e] (ok)
{
	size = 2
	data[10] = d4d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 0
	data[10] = dac02740
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 1
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 2
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 3
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 4
	data[10] = dac02740
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 4
	data[10] = dac027d0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 0
	data[10] = dac027a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 1
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 2
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 3
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 4
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, int, Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 6
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ec5f49b0] (ok)
{
	size = 5
	data[10] = dac027a0
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800000] (ok)
{
	size = 0
	data[10] = dad00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800039] (ok)
{
	size = 0
	data[10] = dad00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800072] (ok)
{
	size = 0
	data[10] = dad00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8000ab] (ok)
{
	size = 0
	data[10] = dad001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8000e4] (ok)
{
	size = 0
	data[10] = dac02770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80011d] (ok)
{
	size = 0
	data[10] = dac027d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800156] (ok)
{
	size = 0
	data[10] = dac02860
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80018f] (ok)
{
	size = 0
	data[10] = dac028f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8001c8] (ok)
{
	size = 0
	data[10] = dac02980
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800201] (ok)
{
	size = 0
	data[10] = dac02a10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80023a] (ok)
{
	size = 0
	data[10] = dae00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800273] (ok)
{
	size = 0
	data[10] = dae00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002ac] (ok)
{
	size = 0
	data[10] = dae00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002e5] (ok)
{
	size = 0
	data[10] = dae001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80031e] (ok)
{
	size = 0
	data[10] = dae00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800357] (ok)
{
	size = 0
	data[10] = dae002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800390] (ok)
{
	size = 0
	data[10] = dae00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8003c9] (ok)
{
	size = 0
	data[10] = dae003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800402] (ok)
{
	size = 0
	data[10] = dae00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80043b] (ok)
{
	size = 0
	data[10] = dae00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800474] (ok)
{
	size = 0
	data[10] = dae005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8004ad] (ok)
{
	size = 0
	data[10] = dae00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8004e6] (ok)
{
	size = 0
	data[10] = dae006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80051f] (ok)
{
	size = 0
	data[10] = dae00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800558] (ok)
{
	size = 0
	data[10] = dae007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800591] (ok)
{
	size = 0
	data[10] = dac02aa0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8005ca] (ok)
{
	size = 0
	data[10] = dac02b30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800603] (ok)
{
	size = 0
	data[10] = dac02bc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80063c] (ok)
{
	size = 0
	data[10] = dac02c50
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db800675] (ok)
{
	size = 0
	data[10] = dac02ce0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002ac] (ok)
{
	size = 1
	data[10] = dae00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002ac] (ok)
{
	size = 2
	data[10] = dae00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80031e] (ok)
{
	size = 1
	data[10] = dae00240
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002ac] (ok)
{
	size = 1
	data[10] = dae00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db8002ac] (ok)
{
	size = 2
	data[10] = dae00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, int, Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [db80031e] (ok)
{
	size = 2
	data[10] = dae00240
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 0
	data[10] = e5c02720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 1
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 2
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 3
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, const int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 2
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 3
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 4
	data[10] = e5c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 4
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 0
	data[10] = e5d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 1
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 2
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 3
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 4
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 5
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 6
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, const int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [ef42ea10] (ok)
{
	size = 5
	data[10] = e5d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002000] (ok)
{
	size = 0
	data[10] = e5c02780
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002039] (ok)
{
	size = 0
	data[10] = e5c027b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002072] (ok)
{
	size = 0
	data[10] = e5c02850
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60020ab] (ok)
{
	size = 0
	data[10] = e5c028e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60020e4] (ok)
{
	size = 0
	data[10] = e5c02970
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600211d] (ok)
{
	size = 0
	data[10] = e5c02a00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002156] (ok)
{
	size = 0
	data[10] = e5c02a90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600218f] (ok)
{
	size = 0
	data[10] = e5c02b20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60021c8] (ok)
{
	size = 0
	data[10] = e5c02bb0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002201] (ok)
{
	size = 0
	data[10] = e5d00060
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600223a] (ok)
{
	size = 0
	data[10] = e5d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002273] (ok)
{
	size = 0
	data[10] = e5d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022ac] (ok)
{
	size = 0
	data[10] = e5f00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022e5] (ok)
{
	size = 0
	data[10] = e5f00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600231e] (ok)
{
	size = 0
	data[10] = e5f00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002357] (ok)
{
	size = 0
	data[10] = e5f001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002390] (ok)
{
	size = 0
	data[10] = e5f00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60023c9] (ok)
{
	size = 0
	data[10] = e5f002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002402] (ok)
{
	size = 0
	data[10] = e5f00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600243b] (ok)
{
	size = 0
	data[10] = e5f003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002474] (ok)
{
	size = 0
	data[10] = e5f00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60024ad] (ok)
{
	size = 0
	data[10] = e5f00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60024e6] (ok)
{
	size = 0
	data[10] = e5f005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600251f] (ok)
{
	size = 0
	data[10] = e5f00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002558] (ok)
{
	size = 0
	data[10] = e5f006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002591] (ok)
{
	size = 0
	data[10] = e5f00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60025ca] (ok)
{
	size = 0
	data[10] = e5f007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002603] (ok)
{
	size = 0
	data[10] = e5f00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600263c] (ok)
{
	size = 0
	data[10] = e5f00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e6002675] (ok)
{
	size = 0
	data[10] = e5f00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022ac] (ok)
{
	size = 1
	data[10] = e5f00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022ac] (ok)
{
	size = 2
	data[10] = e5f00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600231e] (ok)
{
	size = 1
	data[10] = e5f00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022ac] (ok)
{
	size = 1
	data[10] = e5f00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e60022ac] (ok)
{
	size = 2
	data[10] = e5f00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e600231e] (ok)
{
	size = 2
	data[10] = e5f00120
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 0
	data[10] = a1402720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 1
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 2
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 3
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, const int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 2
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 3
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 4
	data[10] = a1402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 4
	data[10] = a14027b0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 0
	data[10] = a1402780
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 1
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 2
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 3
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 4
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 5
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 6
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, const int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e75fda10] (ok)
{
	size = 5
	data[10] = a1402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000000] (ok)
{
	size = 0
	data[10] = a1500000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000039] (ok)
{
	size = 0
	data[10] = a1500090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000072] (ok)
{
	size = 0
	data[10] = a1500120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20000ab] (ok)
{
	size = 0
	data[10] = a15001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20000e4] (ok)
{
	size = 0
	data[10] = a1402750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200011d] (ok)
{
	size = 0
	data[10] = a14027b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000156] (ok)
{
	size = 0
	data[10] = a1402840
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200018f] (ok)
{
	size = 0
	data[10] = a14028d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20001c8] (ok)
{
	size = 0
	data[10] = a1402960
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000201] (ok)
{
	size = 0
	data[10] = a14029f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200023a] (ok)
{
	size = 0
	data[10] = a1402a80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000273] (ok)
{
	size = 0
	data[10] = a1402b10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002ac] (ok)
{
	size = 0
	data[10] = a1402ba0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002e5] (ok)
{
	size = 0
	data[10] = a1402c30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200031e] (ok)
{
	size = 0
	data[10] = a1402cc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000357] (ok)
{
	size = 0
	data[10] = a1402d50
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000390] (ok)
{
	size = 0
	data[10] = a1402de0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20003c9] (ok)
{
	size = 0
	data[10] = a1402e70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000402] (ok)
{
	size = 0
	data[10] = a1402f00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200043b] (ok)
{
	size = 0
	data[10] = a1402f90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000474] (ok)
{
	size = 0
	data[10] = a1403020
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20004ad] (ok)
{
	size = 0
	data[10] = a14030b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20004e6] (ok)
{
	size = 0
	data[10] = a1403140
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200051f] (ok)
{
	size = 0
	data[10] = a14031d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000558] (ok)
{
	size = 0
	data[10] = a1403260
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000591] (ok)
{
	size = 0
	data[10] = a14032f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20005ca] (ok)
{
	size = 0
	data[10] = a1403380
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000603] (ok)
{
	size = 0
	data[10] = a1403410
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200063c] (ok)
{
	size = 0
	data[10] = a14034a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a2000675] (ok)
{
	size = 0
	data[10] = a1403530
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002ac] (ok)
{
	size = 1
	data[10] = a1402ba0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002ac] (ok)
{
	size = 2
	data[10] = a1402ba0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200031e] (ok)
{
	size = 1
	data[10] = a1402cc0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002ac] (ok)
{
	size = 1
	data[10] = a1402ba0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a20002ac] (ok)
{
	size = 2
	data[10] = a1402ba0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [a200031e] (ok)
{
	size = 2
	data[10] = a1402cc0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 0
	data[10] = 37402720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 1
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 2
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 3
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, const int) in line 481 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 2
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 3
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 4
	data[10] = 37402720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 528 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 4
	data[10] = 374027b0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 0
	data[10] = 37402780
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 1
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 2
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 3
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 4
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 5
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 410 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 6
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, const int) in line 446 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e27aaa10] (ok)
{
	size = 5
	data[10] = 37402780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802000] (ok)
{
	size = 0
	data[10] = 37402750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802039] (ok)
{
	size = 0
	data[10] = 374027b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802072] (ok)
{
	size = 0
	data[10] = 37402840
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378020ab] (ok)
{
	size = 0
	data[10] = 374028d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378020e4] (ok)
{
	size = 0
	data[10] = 37402960
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780211d] (ok)
{
	size = 0
	data[10] = 374029f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802156] (ok)
{
	size = 0
	data[10] = 37402a80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780218f] (ok)
{
	size = 0
	data[10] = 37402b10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378021c8] (ok)
{
	size = 0
	data[10] = 37402ba0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802201] (ok)
{
	size = 0
	data[10] = 37402c30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780223a] (ok)
{
	size = 0
	data[10] = 37402cc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802273] (ok)
{
	size = 0
	data[10] = 37402d50
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022ac] (ok)
{
	size = 0
	data[10] = 37402de0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022e5] (ok)
{
	size = 0
	data[10] = 37402e70
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780231e] (ok)
{
	size = 0
	data[10] = 37402f00
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802357] (ok)
{
	size = 0
	data[10] = 37402f90
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802390] (ok)
{
	size = 0
	data[10] = 37403020
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378023c9] (ok)
{
	size = 0
	data[10] = 374030b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802402] (ok)
{
	size = 0
	data[10] = 37403140
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780243b] (ok)
{
	size = 0
	data[10] = 374031d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802474] (ok)
{
	size = 0
	data[10] = 37403260
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378024ad] (ok)
{
	size = 0
	data[10] = 374032f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378024e6] (ok)
{
	size = 0
	data[10] = 37403380
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780251f] (ok)
{
	size = 0
	data[10] = 37403410
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802558] (ok)
{
	size = 0
	data[10] = 374034a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802591] (ok)
{
	size = 0
	data[10] = 37403530
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378025ca] (ok)
{
	size = 0
	data[10] = 374035c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802603] (ok)
{
	size = 0
	data[10] = 37403650
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780263c] (ok)
{
	size = 0
	data[10] = 374036e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 132 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [37802675] (ok)
{
	size = 0
	data[10] = 37403770
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022ac] (ok)
{
	size = 1
	data[10] = 37402de0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022ac] (ok)
{
	size = 2
	data[10] = 37402de0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780231e] (ok)
{
	size = 1
	data[10] = 37402f00
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022ac] (ok)
{
	size = 1
	data[10] = 37402de0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [378022ac] (ok)
{
	size = 2
	data[10] = 37402de0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 362 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [3780231e] (ok)
{
	size = 2
	data[10] = 37402f00
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 0
	data[10] = e3c02720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 1
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 2
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 413 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 3
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, const int) in line 484 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 2
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 3
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 4
	data[10] = e3c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 531 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 4
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 0
	data[10] = e3d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 1
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 2
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 3
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 4
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 5
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 413 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 6
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, const int) in line 449 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [eebcaa10] (ok)
{
	size = 5
	data[10] = e3d00000
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002000] (ok)
{
	size = 0
	data[10] = e3c02780
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002039] (ok)
{
	size = 0
	data[10] = e3e00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002072] (ok)
{
	size = 0
	data[10] = e3e00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40020ab] (ok)
{
	size = 0
	data[10] = e3e00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40020e4] (ok)
{
	size = 0
	data[10] = e3e001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400211d] (ok)
{
	size = 0
	data[10] = e3e00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002156] (ok)
{
	size = 0
	data[10] = e3e002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400218f] (ok)
{
	size = 0
	data[10] = e3e00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40021c8] (ok)
{
	size = 0
	data[10] = e3e003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002201] (ok)
{
	size = 0
	data[10] = e3e00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400223a] (ok)
{
	size = 0
	data[10] = e3e00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002273] (ok)
{
	size = 0
	data[10] = e3e005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022ac] (ok)
{
	size = 0
	data[10] = e3e00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022e5] (ok)
{
	size = 0
	data[10] = e3e006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400231e] (ok)
{
	size = 0
	data[10] = e3e00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002357] (ok)
{
	size = 0
	data[10] = e3e007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002390] (ok)
{
	size = 0
	data[10] = e3e00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40023c9] (ok)
{
	size = 0
	data[10] = e3e00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002402] (ok)
{
	size = 0
	data[10] = e3e00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400243b] (ok)
{
	size = 0
	data[10] = e3e00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002474] (ok)
{
	size = 0
	data[10] = e3e00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40024ad] (ok)
{
	size = 0
	data[10] = e3e00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40024e6] (ok)
{
	size = 0
	data[10] = e3e00bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400251f] (ok)
{
	size = 0
	data[10] = e3e00c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002558] (ok)
{
	size = 0
	data[10] = e3e00cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002591] (ok)
{
	size = 0
	data[10] = e3e00d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40025ca] (ok)
{
	size = 0
	data[10] = e3e00e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002603] (ok)
{
	size = 0
	data[10] = e3e00ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400263c] (ok)
{
	size = 0
	data[10] = e3e00f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e4002675] (ok)
{
	size = 0
	data[10] = e3e00fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022ac] (ok)
{
	size = 1
	data[10] = e3e00630
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022ac] (ok)
{
	size = 2
	data[10] = e3e00630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400231e] (ok)
{
	size = 1
	data[10] = e3e00750
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022ac] (ok)
{
	size = 1
	data[10] = e3e00630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e40022ac] (ok)
{
	size = 2
	data[10] = e3e00630
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [e400231e] (ok)
{
	size = 2
	data[10] = e3e00750
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 0
	data[10] = 20c02720
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 1
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 2
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 2
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 413 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 3
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   3;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int delete_before(List_t *, const int) in line 484 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 2
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  2;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	  [ 2] =   2;	 next =  1;	 prev =  0
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 3
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 3
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  3
	  [ 3] =   4;	 next =  2;	 prev =  0
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 4
	is_sorted = 0
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 4
	data[10] = 20c02720
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   1;	 next =  0;	 prev =  2
	* [ 2] =   2;	 next =  1;	 prev =  4
	* [ 3] =   4;	 next =  4;	 prev =  0
	  [ 4] =   5;	 next =  2;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 3
	tail = 1
	free = 5
	is_sorted = 0
}


assert from bool phys_match_log(List_t *) in line 531 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 4
	data[10] = 20c027b0
	{
	* [ 0] =   0;	 next =  3;	 prev =  1
	* [ 1] =   4;	 next =  2;	 prev =  0
	* [ 2] =   5;	 next =  3;	 prev =  1
	* [ 3] =   2;	 next =  4;	 prev =  2
	  [ 4] =   1;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 0
	data[10] = 20c02780
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 1
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] =   1;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 2
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] =   1;	 next =  2;	 prev =  0
	  [ 2] =   2;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 3
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  3
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	  [ 3] =   3;	 next =  0;	 prev =  2
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 3
	free = 4
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 4
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  4
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	  [ 4] =   4;	 next =  0;	 prev =  3
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 4
	free = 5
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 5
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  5;	 prev =  3
	  [ 5] =   5;	 next =  0;	 prev =  4
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 6
	is_sorted = 1
}


assert from int insert_before(List_t *, const int, const Elem_t) in line 413 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 6
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  4;	 prev =  2
	* [ 4] =   4;	 next =  6;	 prev =  3
	* [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  4
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 7
	is_sorted = 0
}


assert from int delete_after(List_t *, const int) in line 449 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <lst> [e98efa10] (ok)
{
	size = 5
	data[10] = 20c02780
	{
	* [ 0] =   0;	 next =  1;	 prev =  5
	* [ 1] =   1;	 next =  2;	 prev =  0
	* [ 2] =   2;	 next =  3;	 prev =  1
	* [ 3] =   3;	 next =  6;	 prev =  2
	* [ 4] =   0;	 next =  7;	 prev = -1
	  [ 5] =   5;	 next =  0;	 prev =  6
	  [ 6] =  10;	 next =  5;	 prev =  3
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 5
	free = 4
	is_sorted = 0
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800000] (ok)
{
	size = 0
	data[10] = 20d00000
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800039] (ok)
{
	size = 0
	data[10] = 20d00090
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800072] (ok)
{
	size = 0
	data[10] = 20d00120
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218000ab] (ok)
{
	size = 0
	data[10] = 20d001b0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218000e4] (ok)
{
	size = 0
	data[10] = 20d00240
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180011d] (ok)
{
	size = 0
	data[10] = 20d002d0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800156] (ok)
{
	size = 0
	data[10] = 20d00360
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180018f] (ok)
{
	size = 0
	data[10] = 20d003f0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218001c8] (ok)
{
	size = 0
	data[10] = 20d00480
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800201] (ok)
{
	size = 0
	data[10] = 20d00510
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180023a] (ok)
{
	size = 0
	data[10] = 20d005a0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800273] (ok)
{
	size = 0
	data[10] = 20d00630
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002ac] (ok)
{
	size = 0
	data[10] = 20d006c0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002e5] (ok)
{
	size = 0
	data[10] = 20d00750
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180031e] (ok)
{
	size = 0
	data[10] = 20d007e0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800357] (ok)
{
	size = 0
	data[10] = 20d00870
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800390] (ok)
{
	size = 0
	data[10] = 20d00900
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218003c9] (ok)
{
	size = 0
	data[10] = 20d00990
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800402] (ok)
{
	size = 0
	data[10] = 20d00a20
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180043b] (ok)
{
	size = 0
	data[10] = 20d00ab0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800474] (ok)
{
	size = 0
	data[10] = 20d00b40
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218004ad] (ok)
{
	size = 0
	data[10] = 20d00bd0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218004e6] (ok)
{
	size = 0
	data[10] = 20d00c60
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180051f] (ok)
{
	size = 0
	data[10] = 20d00cf0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800558] (ok)
{
	size = 0
	data[10] = 20d00d80
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800591] (ok)
{
	size = 0
	data[10] = 20d00e10
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218005ca] (ok)
{
	size = 0
	data[10] = 20d00ea0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800603] (ok)
{
	size = 0
	data[10] = 20d00f30
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180063c] (ok)
{
	size = 0
	data[10] = 20d00fc0
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from void List_Construct(List_t *, const char *, const int) in line 133 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [21800675] (ok)
{
	size = 0
	data[10] = 20d01050
	{
	  [ 0] =   0;	 next =  0;	 prev =  0
	  [ 1] =   0;	 next =  2;	 prev = -1
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 0
	tail = 0
	free = 1
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002ac] (ok)
{
	size = 1
	data[10] = 20d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 133;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002ac] (ok)
{
	size = 2
	data[10] = 20d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 133;	 next =  2;	 prev =  0
	  [ 2] = 233;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180031e] (ok)
{
	size = 1
	data[10] = 20d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  1
	  [ 1] = 333;	 next =  0;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002ac] (ok)
{
	size = 1
	data[10] = 20d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	  [ 1] = 131;	 next =  1;	 prev =  0
	  [ 2] =   0;	 next =  3;	 prev = -1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 1
	free = 2
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [218002ac] (ok)
{
	size = 2
	data[10] = 20d006c0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 131;	 next =  2;	 prev =  2
	  [ 2] = 2331;	 next =  1;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


assert from int insert_after(List_t *, const int, const Elem_t) in line 365 (file: /Users/alexeykudrinsky/Documents/MIPT/1 course/Introduction to data structures/list/list.cpp)
List_t <hast->rows[i]> [2180031e] (ok)
{
	size = 2
	data[10] = 20d007e0
	{
	* [ 0] =   0;	 next =  1;	 prev =  2
	* [ 1] = 333;	 next =  2;	 prev =  0
	  [ 2] = 33312;	 next =  0;	 prev =  1
	  [ 3] =   0;	 next =  4;	 prev = -1
	  [ 4] =   0;	 next =  5;	 prev = -1
	  [ 5] =   0;	 next =  6;	 prev = -1
	  [ 6] =   0;	 next =  7;	 prev = -1
	  [ 7] =   0;	 next =  8;	 prev = -1
	  [ 8] =   0;	 next =  9;	 prev = -1
	  [ 9] =   0;	 next =  0;	 prev = -1
	}
	head = 1
	tail = 2
	free = 3
	is_sorted = 1
}


